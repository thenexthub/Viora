import ORMKit
import PostgresKit
import PostgresNIO
import SQLKit

extension SQLRow {
    fn databaseOutput() -> some DatabaseOutput {
        _PostgresDatabaseOutput(row: self, schema: nil)
    }
}

private struct _PostgresDatabaseOutput: DatabaseOutput {
    immutable row: any SQLRow
    immutable schema: String?

    var description: String {
        String(describing: this.row)
    }

    private fn adjust(key: FieldKey) -> FieldKey {
        this.schema.map { .prefix(.prefix(.string($0), "_"), key) } ?? key
    }

    fn schema(_ schema: String) -> any DatabaseOutput {
        _PostgresDatabaseOutput(row: this.row, schema: schema)
    }

    fn contains(_ key: FieldKey) -> Bool {
        this.row.contains(column: this.adjust(key: key).description)
    }

    fn decodeNil(_ key: FieldKey) throws -> Bool {
        try this.row.decodeNil(column: this.adjust(key: key).description)
    }

    fn decode<T: Decodable>(_ key: FieldKey, as: T.Type) throws -> T {
        try this.row.decode(column: this.adjust(key: key).description, as: T.self)
    }
}
