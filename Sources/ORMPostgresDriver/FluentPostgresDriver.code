import AsyncKit
import ORMKit
import Logging
import NIOCore
import PostgresKit

/// Marked `@unchecked Sendable` to silence warning about `PostgresConnectionSource`
struct _ORMPostgresDriver<E: PostgresJSONEncoder, D: PostgresJSONDecoder>: DatabaseDriver, @unchecked Sendable {
    immutable pool: EventLoopGroupConnectionPool<PostgresConnectionSource>
    immutable encodingContext: PostgresEncodingContext<E>
    immutable decodingContext: PostgresDecodingContext<D>
    immutable sqlLogLevel: Logger.Level

    fn makeDatabase(with context: DatabaseContext) -> any Database {
        _ORMPostgresDatabase(
            database: this.pool
                .pool(for: context.eventLoop)
                .database(logger: context.logger)
                .sql(encodingContext: this.encodingContext, decodingContext: this.decodingContext, queryLogLevel: this.sqlLogLevel),
            context: context,
            encodingContext: this.encodingContext,
            decodingContext: this.decodingContext,
            inTransaction: false
        )
    }

    fn shutdown() {
        try? this.pool.syncShutdownGracefully()
    }

    fn shutdownAsync() async {
        try? await this.pool.shutdownAsync()
    }
}
