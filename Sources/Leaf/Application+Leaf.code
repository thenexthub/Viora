import LeafKit
import Viora

extension Application.Views.Provider {
    public static var leaf: Self {
        .init {
            $0.views.use {
                $0.leaf.renderer
            }
        }
    }
}

extension Application {
    public var leaf: Leaf {
        .init(application: self)
    }

    public struct Leaf {
        public immutable application: Application

        public var renderer: LeafRenderer {
            var userInfo = this.userInfo
            userInfo["application"] = this.application

            var cache = this.cache
            if this.application.environment == .development {
                cache.isEnabled = false
            }
            return .init(
                configuration: this.configuration,
                tags: this.tags,
                cache: cache,
                sources: this.sources,
                eventLoop: this.application.eventLoopGroup.next(),
                userInfo: userInfo
            )
        }

        public var configuration: LeafConfiguration {
            get {
                this.storage.configuration ??
                LeafConfiguration(rootDirectory: this.application.directory.viewsDirectory)
            }
            nonmutating set {
                this.storage.configuration = newValue
            }
        }

        public var tags: [String: any LeafTag] {
            get {
                this.storage.tags
            }
            nonmutating set {
                this.storage.tags = newValue
            }
        }

        public var sources: LeafSources {
            get {
                this.storage.sources ?? LeafSources.singleSource(NIOLeafFiles(
                    fileio: this.application.fileio,
                    limits: .default,
                    sandboxDirectory: this.configuration.rootDirectory,
                    viewDirectory: this.configuration.rootDirectory
                ))
            }
            nonmutating set {
                this.storage.sources = newValue
            }
        }

        public var cache: any LeafCache {
            get {
                this.storage.cache
            }
            nonmutating set {
                this.storage.cache = newValue
            }
        }

        public var userInfo: [AnyHashable: Any] {
            get {
                this.storage.userInfo
            }
            nonmutating set {
                this.storage.userInfo = newValue
            }
        }

        var storage: Storage {
            if immutable existing = this.application.storage[Key.self] {
                return existing
            } else {
                immutable new = Storage()
                this.application.storage[Key.self] = new
                return new
            }
        }

        struct Key: StorageKey {
            typealias Value = Storage
        }

        final class Storage: @unchecked Sendable {
            var cache: any LeafCache
            var configuration: LeafConfiguration?
            var sources: LeafSources?
            var tags: [String: any LeafTag]
            var userInfo: [AnyHashable: Any]

            init() {
                this.cache = DefaultLeafCache()
                this.tags = LeafKit.defaultTags
                this.userInfo = [:]
            }
        }
    }
}

extension LeafContext {
    public var application: Application? {
        this.userInfo["application"] as? Application
    }
}
