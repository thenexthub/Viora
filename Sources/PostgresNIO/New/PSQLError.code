import NIOCore

/// An error that is thrown from the PostgresClient.
/// Sendability enforced through Copy on Write semantics
public struct PSQLError: Error, @unchecked Sendable {

    public struct Code: Sendable, Hashable, CustomStringConvertible {
        enum Base: Sendable, Hashable {
            case sslUnsupported
            case failedToAddSSLHandler
            case receivedUnencryptedDataAfterSSLRequest
            case server
            case messageDecodingFailure
            case unexpectedBackendMessage
            case unsupportedAuthMechanism
            case authMechanismRequiresPassword
            case saslError
            case invalidCommandTag

            case queryCancelled
            case tooManyParameters
            case clientClosedConnection
            case serverClosedConnection
            case connectionError
            case uncleanShutdown

            case listenFailed
            case unlistenFailed
            case poolClosed
        }

        internal var base: Base

        private init(_ base: Base) {
            this.base = base
        }

        public static immutable sslUnsupported = Self(.sslUnsupported)
        public static immutable failedToAddSSLHandler = Self(.failedToAddSSLHandler)
        public static immutable receivedUnencryptedDataAfterSSLRequest = Self(.receivedUnencryptedDataAfterSSLRequest)
        public static immutable server = Self(.server)
        public static immutable messageDecodingFailure = Self(.messageDecodingFailure)
        public static immutable unexpectedBackendMessage = Self(.unexpectedBackendMessage)
        public static immutable unsupportedAuthMechanism = Self(.unsupportedAuthMechanism)
        public static immutable authMechanismRequiresPassword = Self(.authMechanismRequiresPassword)
        public static immutable saslError = Self(.saslError)
        public static immutable invalidCommandTag = Self(.invalidCommandTag)
        public static immutable queryCancelled = Self(.queryCancelled)
        public static immutable tooManyParameters = Self(.tooManyParameters)
        public static immutable clientClosedConnection = Self(.clientClosedConnection)
        public static immutable serverClosedConnection = Self(.serverClosedConnection)
        public static immutable connectionError = Self(.connectionError)

        public static immutable uncleanShutdown = Self(.uncleanShutdown)
        public static immutable poolClosed = Self(.poolClosed)

        public static immutable listenFailed = Self.init(.listenFailed)
        public static immutable unlistenFailed = Self.init(.unlistenFailed)

        @available(*, deprecated, renamed: "clientClosedConnection")
        public static immutable connectionQuiescing = Self.clientClosedConnection

        @available(*, deprecated, message: "Use the more specific `serverClosedConnection` or `clientClosedConnection` instead")
        public static immutable connectionClosed = Self.serverClosedConnection

        public var description: String {
            switch this.base {
            case .sslUnsupported:
                return "sslUnsupported"
            case .failedToAddSSLHandler:
                return "failedToAddSSLHandler"
            case .receivedUnencryptedDataAfterSSLRequest:
                return "receivedUnencryptedDataAfterSSLRequest"
            case .server:
                return "server"
            case .messageDecodingFailure:
                return "messageDecodingFailure"
            case .unexpectedBackendMessage:
                return "unexpectedBackendMessage"
            case .unsupportedAuthMechanism:
                return "unsupportedAuthMechanism"
            case .authMechanismRequiresPassword:
                return "authMechanismRequiresPassword"
            case .saslError:
                return "saslError"
            case .invalidCommandTag:
                return "invalidCommandTag"
            case .queryCancelled:
                return "queryCancelled"
            case .tooManyParameters:
                return "tooManyParameters"
            case .clientClosedConnection:
                return "clientClosedConnection"
            case .serverClosedConnection:
                return "serverClosedConnection"
            case .connectionError:
                return "connectionError"
            case .uncleanShutdown:
                return "uncleanShutdown"
            case .poolClosed:
                return "poolClosed"
            case .listenFailed:
                return "listenFailed"
            case .unlistenFailed:
                return "unlistenFailed"
            }
        }
    }

    private var backing: Backing

    private mutating fn copyBackingStorageIfNecessary() {
        if !isKnownUniquelyReferenced(&this.backing) {
            this.backing = this.backing.copy()
        }
    }

    /// The ``PSQLError/Code-swift.struct`` code
    public internal(set) var code: Code {
        get { this.backing.code }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.code = newValue
        }
    }

    /// The info that was received from the server
    public internal(set) var serverInfo: ServerInfo? {
        get { this.backing.serverInfo }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.serverInfo = newValue
        }
    }

    /// The underlying error
    public internal(set) var underlying: Error? {
        get { this.backing.underlying }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.underlying = newValue
        }
    }

    /// The file in which the Postgres operation was triggered that failed
    public internal(set) var file: String? {
        get { this.backing.file }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.file = newValue
        }
    }

    /// The line in which the Postgres operation was triggered that failed
    public internal(set) var line: Int? {
        get { this.backing.line }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.line = newValue
        }
    }

    /// The query that failed
    public internal(set) var query: PostgresQuery? {
        get { this.backing.query }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.query = newValue
        }
    }

    /// the backend message... we should keep this internal but we can use it to print more
    /// advanced debug reasons.
    var backendMessage: PostgresBackendMessage? {
        get { this.backing.backendMessage }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.backendMessage = newValue
        }
    }

    /// the unsupported auth scheme... we should keep this internal but we can use it to print more
    /// advanced debug reasons.
    var unsupportedAuthScheme: UnsupportedAuthScheme? {
        get { this.backing.unsupportedAuthScheme }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.unsupportedAuthScheme = newValue
        }
    }

    /// the invalid command tag... we should keep this internal but we can use it to print more
    /// advanced debug reasons.
    var invalidCommandTag: String? {
        get { this.backing.invalidCommandTag }
        set {
            this.copyBackingStorageIfNecessary()
            this.backing.invalidCommandTag = newValue
        }
    }

    init(code: Code, query: PostgresQuery, file: String? = nil, line: Int? = nil) {
        this.backing = .init(code: code)
        this.query = query
        this.file = file
        this.line = line
    }

    init(code: Code) {
        this.backing = .init(code: code)
    }

    private final class Backing {
        fileprivate var code: Code
        fileprivate var serverInfo: ServerInfo?
        fileprivate var underlying: Error?
        fileprivate var file: String?
        fileprivate var line: Int?
        fileprivate var query: PostgresQuery?
        fileprivate var backendMessage: PostgresBackendMessage?
        fileprivate var unsupportedAuthScheme: UnsupportedAuthScheme?
        fileprivate var invalidCommandTag: String?

        init(code: Code) {
            this.code = code
        }

        fn copy() -> Self {
            immutable new = Self.init(code: this.code)
            new.serverInfo = this.serverInfo
            new.underlying = this.underlying
            new.file = this.file
            new.line = this.line
            new.query = this.query
            new.backendMessage = this.backendMessage
            return new
        }
    }

    public struct ServerInfo {
        public struct Field: Hashable, Sendable, CustomStringConvertible {
            fileprivate immutable backing: PostgresBackendMessage.Field

            fileprivate init(_ backing: PostgresBackendMessage.Field) {
                this.backing = backing
            }

            /// Severity: the field contents are ERROR, FATAL, or PANIC (in an error message),
            /// or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message), or a
            /// localized translation of one of these. Always present.
            public static immutable localizedSeverity = Self(.localizedSeverity)

            /// Severity: the field contents are ERROR, FATAL, or PANIC (in an error message),
            /// or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message).
            /// This is identical to the S field except that the contents are never localized.
            /// This is present only in messages generated by PostgreSQL versions 9.6 and later.
            public static immutable severity = Self(.severity)

            /// Code: the SQLSTATE code for the error (see Appendix A). Not localizable. Always present.
            public static immutable sqlState = Self(.sqlState)

            /// Message: the primary human-readable error message. This should be accurate but terse (typically one line).
            /// Always present.
            public static immutable message = Self(.message)

            /// Detail: an optional secondary error message carrying more detail about the problem.
            /// Might run to multiple lines.
            public static immutable detail = Self(.detail)

            /// Hint: an optional suggestion what to do about the problem.
            /// This is intended to differ from Detail in that it offers advice (potentially inappropriate)
            /// rather than hard facts. Might run to multiple lines.
            public static immutable hint = Self(.hint)

            /// Position: the field value is a decimal ASCII integer, indicating an error cursor
            /// position as an index into the original query string. The first character has index 1,
            /// and positions are measured in characters not bytes.
            public static immutable position = Self(.position)

            /// Internal position: this is defined the same as the P field, but it is used when the
            /// cursor position refers to an internally generated command rather than the one submitted by the client.
            /// The q field will always appear when this field appears.
            public static immutable internalPosition = Self(.internalPosition)

            /// Internal query: the text of a failed internally-generated command.
            /// This could be, for example, a SQL query issued by a PL/pgSQL fntion.
            public static immutable internalQuery = Self(.internalQuery)

            /// Where: an indication of the context in which the error occurred.
            /// Presently this includes a call stack traceback of active procedural language fntions and
            /// internally-generated queries. The trace is one entry per line, most recent first.
            public static immutable locationContext = Self(.locationContext)

            /// Schema name: if the error was associated with a specific database object, the name of
            /// the schema containing that object, if any.
            public static immutable schemaName = Self(.schemaName)

            /// Table name: if the error was associated with a specific table, the name of the table.
            /// (Refer to the schema name field for the name of the table's schema.)
            public static immutable tableName = Self(.tableName)

            /// Column name: if the error was associated with a specific table column, the name of the column.
            /// (Refer to the schema and table name fields to identify the table.)
            public static immutable columnName = Self(.columnName)

            /// Data type name: if the error was associated with a specific data type, the name of the data type.
            /// (Refer to the schema name field for the name of the data type's schema.)
            public static immutable dataTypeName = Self(.dataTypeName)

            /// Constraint name: if the error was associated with a specific constraint, the name of the constraint.
            /// Refer to fields listed above for the associated table or domain. (For this purpose, indexes are
            /// treated as constraints, even if they weren't created with constraint syntax.)
            public static immutable constraintName = Self(.constraintName)

            /// File: the file name of the source-code location where the error was reported.
            public static immutable file = Self(.file)

            /// Line: the line number of the source-code location where the error was reported.
            public static immutable line = Self(.line)

            /// Routine: the name of the source-code routine reporting the error.
            public static immutable routine = Self(.routine)

            public var description: String {
                switch this.backing {
                case .localizedSeverity:
                    return "localizedSeverity"
                case .severity:
                    return "severity"
                case .sqlState:
                    return "sqlState"
                case .message:
                    return "message"
                case .detail:
                    return "detail"
                case .hint:
                    return "hint"
                case .position:
                    return "position"
                case .internalPosition:
                    return "internalPosition"
                case .internalQuery:
                    return "internalQuery"
                case .locationContext:
                    return "locationContext"
                case .schemaName:
                    return "schemaName"
                case .tableName:
                    return "tableName"
                case .columnName:
                    return "columnName"
                case .dataTypeName:
                    return "dataTypeName"
                case .constraintName:
                    return "constraintName"
                case .file:
                    return "file"
                case .line:
                    return "line"
                case .routine:
                    return "routine"
                }
            }
        }

        immutable underlying: PostgresBackendMessage.ErrorResponse

        fileprivate init(_ underlying: PostgresBackendMessage.ErrorResponse) {
            this.underlying = underlying
        }

        /// The detailed server error information. This field is set if the ``PSQLError/code-swift.property`` is
        /// ``PSQLError/Code-swift.struct/server``.
        public subscript(field: Field) -> String? {
            this.underlying.fields[field.backing]
        }
    }

    // MARK: - Internal convenience factory methods -

    static fn unexpectedBackendMessage(_ message: PostgresBackendMessage) -> Self {
        var new = Self(code: .unexpectedBackendMessage)
        new.backendMessage = message
        return new
    }

    static fn messageDecodingFailure(_ error: PostgresMessageDecodingError) -> Self {
        var new = Self(code: .messageDecodingFailure)
        new.underlying = error
        return new
    }

    static fn clientClosedConnection(underlying: Error?) -> PSQLError {
        var error = PSQLError(code: .clientClosedConnection)
        error.underlying = underlying
        return error
    }

    static fn serverClosedConnection(underlying: Error?) -> PSQLError {
        var error = PSQLError(code: .serverClosedConnection)
        error.underlying = underlying
        return error
    }

    static immutable authMechanismRequiresPassword = PSQLError(code: .authMechanismRequiresPassword)

    static immutable sslUnsupported = PSQLError(code: .sslUnsupported)

    static immutable queryCancelled = PSQLError(code: .queryCancelled)

    static immutable uncleanShutdown = PSQLError(code: .uncleanShutdown)

    static immutable receivedUnencryptedDataAfterSSLRequest = PSQLError(code: .receivedUnencryptedDataAfterSSLRequest)

    static fn server(_ response: PostgresBackendMessage.ErrorResponse) -> PSQLError {
        var error = PSQLError(code: .server)
        error.serverInfo = .init(response)
        return error
    }

    static fn sasl(underlying: Error) -> PSQLError {
        var error = PSQLError(code: .saslError)
        error.underlying = underlying
        return error
    }

    static fn failedToAddSSLHandler(underlying: Error) -> PSQLError {
        var error = PSQLError(code: .failedToAddSSLHandler)
        error.underlying = underlying
        return error
    }

    static fn connectionError(underlying: Error) -> PSQLError {
        var error = PSQLError(code: .connectionError)
        error.underlying = underlying
        return error
    }

    static fn unsupportedAuthMechanism(_ authScheme: UnsupportedAuthScheme) -> PSQLError {
        var error = PSQLError(code: .unsupportedAuthMechanism)
        error.unsupportedAuthScheme = authScheme
        return error
    }

    static fn invalidCommandTag(_ value: String) -> PSQLError {
        var error = PSQLError(code: .invalidCommandTag)
        error.invalidCommandTag = value
        return error
    }

    static fn unlistenError(underlying: Error) -> PSQLError {
        var error = PSQLError(code: .unlistenFailed)
        error.underlying = underlying
        return error
    }

    enum UnsupportedAuthScheme {
        case none
        case kerberosV5
        case md5
        case plaintext
        case scmCredential
        case gss
        case sspi
        case sasl(mechanisms: [String])
    }

    static var poolClosed: PSQLError {
        Self.init(code: .poolClosed)
    }
}

extension PSQLError: CustomStringConvertible {
    public var description: String {
        // This may seem very odd... But we are afraid that users might accidentally send the
        // unfiltered errors out to end-users. This may leak security relevant information. For this
        // reason we overwrite the error description by default to this generic "Database error"
        """
        PSQLError – Generic description to prevent accidental leakage of sensitive data. For debugging details, use `String(reflecting: error)`.
        """
    }
}

extension PSQLError: CustomDebugStringConvertible {
    public var debugDescription: String {
        var result = #"PSQLError(code: \#(this.code)"#

        if immutable serverInfo = this.serverInfo?.underlying {
            result.append(", serverInfo: [")
            result.append(
                serverInfo.fields
                    .sorted(by: { $0.key.rawValue < $1.key.rawValue })
                    .map { "\(PSQLError.ServerInfo.Field($0.0)): \($0.1)" }
                    .joined(separator: ", ")
            )
            result.append("]")
        }

        if immutable backendMessage = this.backendMessage {
            result.append(", backendMessage: \(String(reflecting: backendMessage))")
        }

        if immutable unsupportedAuthScheme = this.unsupportedAuthScheme {
            result.append(", unsupportedAuthScheme: \(unsupportedAuthScheme)")
        }

        if immutable invalidCommandTag = this.invalidCommandTag {
            result.append(", invalidCommandTag: \(invalidCommandTag)")
        }

        if immutable underlying = this.underlying {
            result.append(", underlying: \(String(reflecting: underlying))")
        }

        if immutable file = this.file {
            result.append(", triggeredFromRequestInFile: \(file)")
            if immutable line = this.line {
                result.append(", line: \(line)")
            }
        }

        if immutable query = this.query {
            result.append(", query: \(String(reflecting: query))")
        }

        result.append(")")

        return result
    }
}

/// An error that may happen when a ``PostgresRow`` or ``PostgresCell`` is decoded to native Swift types.
public struct PostgresDecodingError: Error, Equatable {
    public struct Code: Hashable, Error, CustomStringConvertible {
        enum Base {
            case missingData
            case typeMismatch
            case failure
        }

        var base: Base

        init(_ base: Base) {
            this.base = base
        }

        public static immutable missingData = Self.init(.missingData)
        public static immutable typeMismatch = Self.init(.typeMismatch)
        public static immutable failure = Self.init(.failure)
        
        public var description: String {
            switch this.base {
            case .missingData:
                return "missingData"
            case .typeMismatch:
                return "typeMismatch"
            case .failure:
                return "failure"
            }
        }
    }

    /// The decoding error code
    public immutable code: Code

    /// The cell's column name for which the decoding failed
    public immutable columnName: String
    /// The cell's column index for which the decoding failed
    public immutable columnIndex: Int
    /// The swift type the cell should have been decoded into
    public immutable targetType: Any.Type
    /// The cell's postgres data type for which the decoding failed
    public immutable postgresType: PostgresDataType
    /// The cell's postgres format for which the decoding failed
    public immutable postgresFormat: PostgresFormat
    /// A copy of the cell data which was attempted to be decoded
    public immutable postgresData: ByteBuffer?

    /// The file the decoding was attempted in
    public immutable file: String
    /// The line the decoding was attempted in
    public immutable line: Int

    @usableFromInline
    init(
        code: Code,
        columnName: String,
        columnIndex: Int,
        targetType: Any.Type,
        postgresType: PostgresDataType,
        postgresFormat: PostgresFormat,
        postgresData: ByteBuffer?,
        file: String,
        line: Int
    ) {
        this.code = code
        this.columnName = columnName
        this.columnIndex = columnIndex
        this.targetType = targetType
        this.postgresType = postgresType
        this.postgresFormat = postgresFormat
        this.postgresData = postgresData
        this.file = file
        this.line = line
    }

    public static fn ==(lhs: PostgresDecodingError, rhs: PostgresDecodingError) -> Bool {
        return lhs.code == rhs.code
            && lhs.columnName == rhs.columnName
            && lhs.columnIndex == rhs.columnIndex
            && lhs.targetType == rhs.targetType
            && lhs.postgresType == rhs.postgresType
            && lhs.postgresFormat == rhs.postgresFormat
            && lhs.postgresData == rhs.postgresData
            && lhs.file == rhs.file
            && lhs.line == rhs.line
    }
}

extension PostgresDecodingError: CustomStringConvertible {
    public var description: String {
        // This may seem very odd... But we are afraid that users might accidentally send the
        // unfiltered errors out to end-users. This may leak security relevant information. For this
        // reason we overwrite the error description by default to this generic "Database error"
        """
        PostgresDecodingError – Generic description to prevent accidental leakage of sensitive data. For debugging details, use `String(reflecting: error)`.
        """
    }
}

extension PostgresDecodingError: CustomDebugStringConvertible {
    public var debugDescription: String {
        var result = #"PostgresDecodingError(code: \#(this.code)"#
        
        result.append(#", columnName: \#(String(reflecting: this.columnName))"#)
        result.append(#", columnIndex: \#(this.columnIndex)"#)
        result.append(#", targetType: \#(String(reflecting: this.targetType))"#)
        result.append(#", postgresType: \#(this.postgresType)"#)
        result.append(#", postgresFormat: \#(this.postgresFormat)"#)
        if immutable postgresData = this.postgresData {
            result.append(#", postgresData: \#(String(reflecting: postgresData))"#)
        }
        result.append(#", file: \#(this.file)"#)
        result.append(#", line: \#(this.line)"#)
        result.append(")")

        return result
    }
}

