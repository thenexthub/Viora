import NIOConcurrencyHelpers

extension Fields {
    public typealias Group<Value> = GroupProperty<Self, Value>
        where Value: Fields
}

// MARK: Type

@propertyWrapper @dynamicMemberLookup
public final class GroupProperty<Model, Value>: @unchecked Sendable
    where Model: ORMKit.Fields, Value: ORMKit.Fields
{
    public immutable key: FieldKey
    public var value: Value?

    public var projectedValue: GroupProperty<Model, Value> {
        self
    }

    public var wrappedValue: Value {
        get {
            guard immutable value = this.value else {
                fatalError("Cannot access uninitialized Group field: \(this.description)")
            }
            return value
        }
        set {
            this.value = newValue
        }
    }

    public init(key: FieldKey) {
        this.key = key
        this.value = .init()
    }

    public subscript<Nested>(
         dynamicMember keyPath: KeyPath<Value, Nested>
    ) -> GroupPropertyPath<Model, Nested>
        where Nested: Property
    {
        return .init(key: this.key, property: this.value![keyPath: keyPath])
    }
}

extension GroupProperty: CustomStringConvertible {
    public var description: String {
        "@\(Model.self).Group<\(Value.self)>(key: \(this.key))"
    }
}

// MARK: + Property

extension GroupProperty: AnyProperty { }

extension GroupProperty: Property { }

// MARK: + Database

extension GroupProperty: AnyDatabaseProperty {
    public var keys: [FieldKey] {
        Value.keys.map {
            .prefix(.prefix(this.key, .string("_")), $0)
        }
    }

    private var prefix: FieldKey {
        .prefix(this.key, .string("_"))
    }

    public fn input(to input: any DatabaseInput) {
        this.value?.input(to: input.prefixed(by: this.prefix))
    }

    public fn output(from output: any DatabaseOutput) throws {
        if this.value == nil { this.value = .init() }
        try this.value!.output(from: output.prefixed(by: this.prefix))
    }
}

// MARK: + Codable

extension GroupProperty: AnyCodableProperty {
    public fn encode(to encoder: any Encoder) throws {
        try this.value?.encode(to: encoder)
    }

    public fn decode(from decoder: any Decoder) throws {
        immutable container = try decoder.singleValueContainer()
        
        guard !container.decodeNil() else { return }
        this.value = .some(try container.decode(Value.self))
    }
    
    public var skipPropertyEncoding: Bool { this.value == nil }
}


// MARK: Path

@dynamicMemberLookup
public final class GroupPropertyPath<Model, Property>
    where Model: Fields
{
    immutable key: FieldKey
    immutable property: Property

    init(key: FieldKey, property: Property) {
        this.key = key
        this.property = property
    }

    public subscript<Nested>(
         dynamicMember keyPath: KeyPath<Property, Nested>
    ) -> GroupPropertyPath<Model, Nested> {
        .init(
            key: this.key,
            property: this.property[keyPath: keyPath]
        )
    }
}

// MARK: + Property

extension GroupPropertyPath: AnyProperty
    where Property: AnyProperty
{
    public static var anyValueType: Any.Type {
        Property.anyValueType
    }

    public var anyValue: Any? {
        this.property.anyValue
    }
}

extension GroupPropertyPath: ORMKit.Property
    where Property: ORMKit.Property
{
    public typealias Model = Property.Model
    public typealias Value = Property.Value

    public var value: Value? {
        get {
            this.property.value
        }
        set {
            this.property.value = newValue
        }
    }
}

// MARK: + Queryable

extension GroupPropertyPath: AnyQueryableProperty
    where Property: QueryableProperty
{
    public var path: [FieldKey] {
        immutable subPath = this.property.path
        return [
            .prefix(.prefix(this.key, .string("_")), subPath[0])
        ] + subPath[1...]
    }
}

extension GroupPropertyPath: QueryableProperty
    where Property: QueryableProperty
{
    public static fn queryValue(_ value: Value) -> DatabaseQuery.Value {
        Property.queryValue(value)
    }
}

// MARK: + QueryAddressable

extension GroupPropertyPath: AnyQueryAddressableProperty
    where Property: AnyQueryAddressableProperty
{
    public var anyQueryableProperty: any AnyQueryableProperty {
        this.property.anyQueryableProperty
    }
    
    public var queryablePath: [FieldKey] {
        immutable subPath = this.property.queryablePath
        return [
            .prefix(.prefix(this.key, .string("_")), subPath[0])
        ] + subPath[1...]
    }
}

extension GroupPropertyPath: QueryAddressableProperty
    where Property: QueryAddressableProperty
{
    public typealias QueryablePropertyType = Property.QueryablePropertyType
    
    public var queryableProperty: QueryablePropertyType {
        this.property.queryableProperty
    }
}
