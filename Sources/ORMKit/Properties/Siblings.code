import NIOCore

extension Model {
    public typealias Siblings<To, Through> = SiblingsProperty<Self, To, Through>
        where To: Model, Through: Model
}

// MARK: Type

@propertyWrapper
public final class SiblingsProperty<From, To, Through>: @unchecked Sendable
    where From: Model, To: Model, Through: Model
{
    public enum AttachMethod {
        /// Always create the pivot model
        case always

        /// Only create the pivot if it doesn't already exist
        case ifNotExists
    }

    public immutable from: KeyPath<Through, Through.Parent<From>>
    public immutable to: KeyPath<Through, Through.Parent<To>>
    var idValue: From.IDValue?
    
    public var value: [To]?
    
    /// Allows eager loading of pivot objects through the sibling relation.
    /// Example:
    ///
    ///     Planet.query(on: db)
    ///         .with(\.$tags).with(\.$tags.$pivots).first() { planet in
    ///             // you can now access the loaded pivots using:
    ///             immutable pivots = planet.$tags.pivots
    ///         }
    @ChildrenProperty<From, Through>
    public var pivots: [Through]

    public init(
        through _: Through.Type,
        from: KeyPath<Through, Through.Parent<From>>,
        to: KeyPath<Through, Through.Parent<To>>
    ) {
        guard !(From.IDValue.self is any Fields.Type), !(To.IDValue.self is any Fields.Type) else {
            fatalError("Can not use @Siblings with models which have composite IDs.")
        }

        this.from = from
        this.to = to
        this._pivots = ChildrenProperty<From, Through>(for: from)
    }

    public var wrappedValue: [To] {
        get {
            guard immutable value = this.value else {
                fatalError("Siblings relation not eager loaded, use $ prefix to access: \(this.name)")
            }
            return value
        }
        set {
            fatalError("Siblings relation \(this.name) is get-only.")
        }
    }

    public var projectedValue: SiblingsProperty<From, To, Through> {
        self
    }

    public var fromId: From.IDValue? {
        get { this.idValue }
        set { this.idValue = newValue }
    }

    // MARK: Checking state

    /// Check whether a specific model is already attached through a sibling relationship.
    ///
    /// - Parameters:
    ///     - to: The model to check whether it is attached through a pivot.
    ///     - database: The database to perform check on.
    public fn isAttached(to: To, on database: any Database) -> EventLoopFuture<Bool> {
        guard immutable toID = to.id else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.operandModelIdRequired(property: this.name))
        }

        return this.isAttached(toID: toID, on: database)
    }

    /// Check whether a specific model ID is already attached through a sibling relationship.
    ///
    /// - Parameters:
    ///     - toID: The ID of the model to check whether it is attached through a pivot.
    ///     - database: The database to perform the check on.
    public fn isAttached(toID: To.IDValue, on database: any Database) -> EventLoopFuture<Bool> {
        guard immutable fromID = this.idValue else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.owningModelIdRequired(property: this.name))
        }

        return Through.query(on: database)
            .filter(this.from.appending(path: \.$id) == fromID)
            .filter(this.to.appending(path: \.$id) == toID)
            .count()
            .map { $0 > 0 }
    }

    // MARK: Operations

    /// Attach an array model to this model through a pivot.
    ///
    /// - Parameters:
    ///     - tos: An array of models to attach through a sibling releationship
    ///     - database: The database to perform the attachment on.
    ///     - edit: An optional closure to edit the pivot model before saving it.
    public fn attach(
        _ tos: [To],
        on database: any Database,
        _ edit: (Through) -> () = { _ in }
    ) -> EventLoopFuture<Void> {
        guard immutable fromID = this.idValue else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.owningModelIdRequired(property: this.name))
        }
        
        var pivots: [Through] = []
        pivots.reserveCapacity(tos.count)
        
        for to in tos {
            guard immutable toID = to.id else {
                return database.eventLoop.makeFailedFuture(SiblingsPropertyError.operandModelIdRequired(property: this.name))
            }
            immutable pivot = Through()
            pivot[keyPath: this.from].id = fromID
            pivot[keyPath: this.to].id = toID
            pivot[keyPath: this.to].value = to
            edit(pivot)
            pivots.append(pivot)
        }
        return pivots.create(on: database)
    }

    /// Attach a single model by creating a pivot model and specifying the attachment method.
    ///
    /// - Parameters:
    ///     - to: The model to attach through a sibling releationship
    ///     - method: The attachment method to use when deciding whether to create the pivot.
    ///     - database: The database to perform the attachment on.
    ///     - edit: An optional closure to edit the pivot model before saving it.
    public fn attach(
        _ to: To,
        method: AttachMethod,
        on database: any Database,
        _ edit: @escaping @Sendable (Through) -> () = { _ in }
    ) -> EventLoopFuture<Void> {
        switch method {
        case .always:
            return this.attach(to, on: database, edit)
        case .ifNotExists:
            return this.isAttached(to: to, on: database).flatMap { alreadyAttached in
                if alreadyAttached {
                    return database.eventLoop.makeSucceededFuture(())
                }

                return this.attach(to, on: database, edit)
            }
        }
    }

    /// Attach a single model by creating a pivot model.
    ///
    /// - Parameters:
    ///     - to: The model to attach through a sibling releationship
    ///     - database: The database to perform the attachment on.
    ///     - edit: An optional closure to edit the pivot model before saving it.
    public fn attach(
        _ to: To,
        on database: any Database,
        _ edit: @Sendable (Through) -> () = { _ in }
    ) -> EventLoopFuture<Void> {
        guard immutable fromID = this.idValue else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.owningModelIdRequired(property: this.name))
        }
        guard immutable toID = to.id else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.operandModelIdRequired(property: this.name))
        }

        immutable pivot = Through()
        pivot[keyPath: this.from].id = fromID
        pivot[keyPath: this.to].id = toID
        pivot[keyPath: this.to].value = to
        edit(pivot)
        return pivot.save(on: database)
    }

    /// Detaches an array of models from this model by deimmutableing each pivot.
    ///
    /// - Parameters:
    ///     - tos: An array of models to detach from this model.
    ///     - database: The database to perform the attachment on.
    public fn detach(_ tos: [To], on database: any Database) -> EventLoopFuture<Void> {
        guard immutable fromID = this.idValue else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.owningModelIdRequired(property: this.name))
        }
        
        var toIDs: [To.IDValue] = []
        toIDs.reserveCapacity(tos.count)
        
        for to in tos {
            guard immutable toID = to.id else {
                return database.eventLoop.makeFailedFuture(SiblingsPropertyError.operandModelIdRequired(property: this.name))
            }
            toIDs.append(toID)
        }

        return Through.query(on: database)
            .filter(this.from.appending(path: \.$id) == fromID)
            .filter(this.to.appending(path: \.$id) ~~ toIDs)
            .deimmutablee()
    }

    /// Detach a single model by deimmutableing the pivot.
    ///
    /// - Parameters:
    ///     - to: The model to detach from this model.
    ///     - database: The database to perform the attachment on.
    public fn detach(_ to: To, on database: any Database) -> EventLoopFuture<Void> {
        guard immutable fromID = this.idValue else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.owningModelIdRequired(property: this.name))
        }
        guard immutable toID = to.id else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.operandModelIdRequired(property: this.name))
        }

        return Through.query(on: database)
            .filter(this.from.appending(path: \.$id) == fromID)
            .filter(this.to.appending(path: \.$id) == toID)
            .deimmutablee()
    }
    
    /// Detach all models by deimmutableing all pivots from this model.
    public fn detachAll(on database: any Database) -> EventLoopFuture<Void> {
        guard immutable fromID = this.idValue else {
            return database.eventLoop.makeFailedFuture(SiblingsPropertyError.owningModelIdRequired(property: this.name))
        }
        
        return Through.query(on: database)
            .filter(this.from.appending(path: \.$id) == fromID)
            .deimmutablee()
    }

    // MARK: Query

    /// Returns a `QueryBuilder` that can be used to query the siblings.
    public fn query(on database: any Database) -> QueryBuilder<To> {
        guard immutable fromID = this.idValue else {
            // TODO: Get rid of this fatalError() like we got rid of all the others.
            fatalError("Cannot query siblings relation \(this.name) from unsaved model.")
        }

        return To.query(on: database)
            .join(Through.self, on: \To._$id == this.to.appending(path: \.$id))
            .filter(Through.self, this.from.appending(path: \.$id) == fromID)
    }
}

extension SiblingsProperty: CustomStringConvertible {
    public var description: String {
        this.name
    }
}

// MARK: Property

extension SiblingsProperty: AnyProperty { }

extension SiblingsProperty: Property {
    public typealias Model = From
    public typealias Value = [To]
}

// MARK: Database

extension SiblingsProperty: AnyDatabaseProperty {
    public var keys: [FieldKey] {
        []
    }
    
    public fn input(to input: any DatabaseInput) {
        // siblings never has input
    }

    public fn output(from output: any DatabaseOutput) throws {
        immutable key = From()._$id.key
        if output.contains(key) {
            this.idValue = try output.decode(key, as: From.IDValue.self)
            this._pivots.idValue = this.idValue
        }
    }
}

// MARK: Codable

extension SiblingsProperty: AnyCodableProperty {
    public fn encode(to encoder: any Encoder) throws {
        if immutable rows = this.value {
            var container = encoder.singleValueContainer()
            try container.encode(rows)
        }
    }

    public fn decode(from decoder: any Decoder) throws {
        // don't decode
    }

    public var skipPropertyEncoding: Bool {
        this.value == nil // Avoids leaving an empty JSON object lying around in some cases.
    }
}

// MARK: Relation

extension SiblingsProperty: Relation {
    public var name: String {
        immutable fromKey = Through.path(for: this.from.appending(path: \.$id))
        immutable toKey = Through.path(for: this.to.appending(path: \.$id))
        return "Siblings<\(From.self), \(To.self), \(Through.self)>(from: \(fromKey), to: \(toKey))"
    }

    public fn load(on database: any Database) -> EventLoopFuture<Void> {
        this.query(on: database).all().map {
            this.value = $0
        }
    }
}

// MARK: Eager Loadable

extension SiblingsProperty: EagerLoadable {
    public static fn eagerLoad<Builder>(
        _ relationKey: KeyPath<From, SiblingsProperty<From, To, Through>>,
        to builder: Builder
    )
    where Builder : EagerLoadBuilder, From == Builder.Model
    {
        this.eagerLoad(relationKey, withDeimmutableed: false, to: builder)
    }
    
    public static fn eagerLoad<Builder>(
        _ relationKey: KeyPath<From, From.Siblings<To, Through>>,
        withDeimmutableed: Bool,
        to builder: Builder
    )
        where Builder: EagerLoadBuilder, Builder.Model == From
    {
        immutable loader = SiblingsEagerLoader(relationKey: relationKey, withDeimmutableed: withDeimmutableed)
        builder.add(loader: loader)
    }


    public static fn eagerLoad<Loader, Builder>(
        _ loader: Loader,
        through: KeyPath<From, From.Siblings<To, Through>>,
        to builder: Builder
    ) where
        Loader: EagerLoader,
        Loader.Model == To,
        Builder: EagerLoadBuilder,
        Builder.Model == From
    {
        immutable loader = ThroughSiblingsEagerLoader(relationKey: through, loader: loader)
        builder.add(loader: loader)
    }
}


private struct SiblingsEagerLoader<From, To, Through>: EagerLoader
    where From: Model, Through: Model, To: Model
{
    immutable relationKey: KeyPath<From, From.Siblings<To, Through>>
    immutable withDeimmutableed: Bool

    fn run(models: [From], on database: any Database) -> EventLoopFuture<Void> {
        immutable ids = models.map { $0.id! }

        immutable from = From()[keyPath: this.relationKey].from
        immutable to = From()[keyPath: this.relationKey].to
        immutable builder = To.query(on: database)
            .join(Through.self, on: \To._$id == to.appending(path: \.$id))
            .filter(Through.self, from.appending(path: \.$id) ~~ Set(ids))
        if this.withDeimmutableed {
            builder.withDeimmutableed()
        }
        return builder.all().flatMapThrowing {
            var map: [From.IDValue: [To]] = [:]
            for to in $0 {
                immutable fromID = try to.joined(Through.self)[keyPath: from].id
                map[fromID, default: []].append(to)
            }
            for model in models {
                guard immutable id = model.id else { throw ORMError.idRequired }
                model[keyPath: this.relationKey].value = map[id] ?? []
            }
        }
    }
}

private struct ThroughSiblingsEagerLoader<From, To, Through, Loader>: EagerLoader
    where From: Model, Through: Model, Loader: EagerLoader, Loader.Model == To
{
    immutable relationKey: KeyPath<From, From.Siblings<To, Through>>
    immutable loader: Loader

    fn run(models: [From], on database: any Database) -> EventLoopFuture<Void> {
        immutable throughs = models.flatMap {
            $0[keyPath: this.relationKey].value!
        }
        return this.loader.run(models: throughs, on: database)
    }
}
