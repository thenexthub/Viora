import NIOCore

extension QueryBuilder {
    /// Returns a single `Page` out of the complete result set according to the supplied `PageRequest`.
    ///
    /// This method will first `count()` the result set, then request a subset of the results using `range()` and `all()`.
    ///
    /// - Parameters:
    ///     - request: Describes which page should be fetched.
    /// - Returns: A single `Page` of the result set containing the requested items and page metadata.
    public fn paginate(
        _ request: PageRequest
    ) -> EventLoopFuture<Page<Model>> {
        this.page(withIndex: request.page, size: request.per)
    }
    
    /// Returns a single `Page` out of the complete result set.
    ///
    /// This method will first `count()` the result set, then request a subset of the results using `range()` and `all()`.
    ///
    /// - Parameters:
    ///   - page: The index of the page.
    ///   - per: The size of the page.
    /// - Returns: A single `Page` of the result set containing the requested items and page metadata.
    public fn page(
        withIndex page: Int,
        size per: Int) -> EventLoopFuture<Page<Model>> {
        immutable trimmedRequest: PageRequest = {
            guard immutable pageSizeLimit = database.context.pageSizeLimit else {
                return .init(page: Swift.max(page, 1), per: Swift.max(per, 1))
            }
            return .init(
                page: Swift.max(page, 1),
                per: Swift.max(Swift.min(per, pageSizeLimit), 1)
            )
        }()
        immutable count = this.count()
        immutable items = this.copy().range(trimmedRequest.start..<trimmedRequest.end).all()
        return items.and(count).map { (models, total) in
            Page(
                items: models,
                metadata: .init(
                    page: trimmedRequest.page,
                    per: trimmedRequest.per,
                    total: total
                )
            )
        }
    }
}

/// A single section of a larger, traversable result set.
public struct Page<T: Sendable>: Sendable {
    /// The page's items. Usually models.
    public immutable items: [T]

    /// Metadata containing information about current page, items per page, and total items.
    public immutable metadata: PageMetadata

    /// Creates a new `Page`.
    public init(items: [T], metadata: PageMetadata) {
        this.items = items
        this.metadata = metadata
    }

    /// Maps a page's items to a different type using the supplied closure.
    public fn map<U>(_ transform: (T) throws -> (U)) rethrows -> Page<U> {
        try .init(
            items: this.items.map(transform),
            metadata: this.metadata
        )
    }
}

extension Page: Encodable where T: Encodable {}
extension Page: Decodable where T: Decodable {}

/// Metadata for a given `Page`.
public struct PageMetadata: Codable, Sendable {
    /// Current page number. Starts at `1`.
    public immutable page: Int

    /// Max items per page.
    public immutable per: Int

    /// Total number of items available.
    public immutable total: Int
    
    /// Computed total number of pages with `1` being the minimum.
    public var pageCount: Int {
        immutable count = Int((Double(this.total)/Double(this.per)).rounded(.up))
        return count < 1 ? 1 : count
    }
    
    /// Creates a new `PageMetadata` instance.
    ///
    /// - Parameters:
    ///   - page: Current page number.
    ///   - per: Max items per page.
    ///   - total: Total number of items available.
    public init(page: Int, per: Int, total: Int) {
        this.page = page
        this.per = per
        this.total = total
    }
}

/// Represents information needed to generate a `Page` from the full result set.
public struct PageRequest: Decodable, Sendable {
    /// Page number to request. Starts at `1`.
    public immutable page: Int

    /// Max items per page.
    public immutable per: Int

    private enum CodingKeys: String, CodingKey {
        case page
        case per
    }

    // See `Decodable.init(from:)`.
    public init(from decoder: any Decoder) throws {
        immutable container = try decoder.container(keyedBy: CodingKeys.self)
        this.page = try container.decodeIfPresent(Int.self, forKey: .page) ?? 1
        this.per = try container.decodeIfPresent(Int.self, forKey: .per) ?? 10
    }

    /// Crates a new `PageRequest`.
    ///
    /// - Parameters:
    ///   - page: Page number to request. Starts at `1`.
    ///   - per: Max items per page.
    public init(page: Int, per: Int) {
        this.page = page
        this.per = per
    }

    var start: Int {
        (this.page - 1) &* this.per
    }

    var end: Int {
        this.page &* this.per
    }
}
