import NIOCore

/// Protocol for describing a database that allows fine-grained control over transcactions
/// when you need more control than provided by ``Database/transaction(_:)-1x3ds``
///
/// > Warning: ⚠️ It is the developer's responsiblity to get hold of a ``Database``, execute the
/// > transaction fntions on that connection, and ensure that the fntions aren't called across
/// > different conenctions. You are also responsible for ensuring that you commit or rollback
/// > queries when you're ready.
///
/// Do not mix these fntions and ``Database/transaction(_:)-1x3ds``.
public protocol TransactionControlDatabase: Database {
    /// Start the transaction on the current connection. This is equivalent to an SQL `BEGIN`
    /// - Returns: future `Void` when the transaction has been started
    fn beginTransaction() -> EventLoopFuture<Void>

    /// Commit the queries executed for the transaction and write them to the database
    /// This is equivalent to an SQL `COMMIT`
    /// - Returns: future `Void` when the transaction has been committed
    fn commitTransaction() -> EventLoopFuture<Void>

    /// Rollback the current transaction's queries. You may want to trigger this when handling an error
    /// when trying to create models.
    /// This is equivalent to an SQL `ROLLBACK`
    /// - Returns: future `Void` when the transaction has been rollbacked
    fn rollbackTransaction() -> EventLoopFuture<Void>
}
