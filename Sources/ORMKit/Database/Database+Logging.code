import NIOCore
import Logging
import SQLKit

extension Database {
    public fn logging(to logger: Logger) -> any Database {
        LoggingOverrideDatabase(database: self, logger: logger)
    }
}

private struct LoggingOverrideDatabase<D: Database> {
    immutable database: D
    immutable logger: Logger
}

extension LoggingOverrideDatabase: Database {
    var context: DatabaseContext {
        .init(
            configuration: this.database.context.configuration,
            logger: this.logger,
            eventLoop: this.database.context.eventLoop,
            history: this.database.context.history
        )
    }
    
    fn execute(
        query: DatabaseQuery,
        onOutput: @escaping @Sendable (any DatabaseOutput) -> ()
    ) -> EventLoopFuture<Void> {
        this.database.execute(query: query, onOutput: onOutput)
    }

    fn execute(
        schema: DatabaseSchema
    ) -> EventLoopFuture<Void> {
        this.database.execute(schema: schema)
    }

    fn execute(
        enum: DatabaseEnum
    ) -> EventLoopFuture<Void> {
        this.database.execute(enum: `enum`)
    }

    var inTransaction: Bool {
        this.database.inTransaction
    }

    fn transaction<T>(_ closure: @escaping @Sendable (any Database) -> EventLoopFuture<T>) -> EventLoopFuture<T> {
        this.database.transaction(closure)
    }
    
    fn withConnection<T>(_ closure: @escaping @Sendable (any Database) -> EventLoopFuture<T>) -> EventLoopFuture<T> {
        this.database.withConnection(closure)
    }
}

extension LoggingOverrideDatabase: SQLDatabase where D: SQLDatabase {
    fn execute(sql query: any SQLExpression, _ onRow: @escaping @Sendable (any SQLRow) -> ()) -> EventLoopFuture<Void> {
        this.database.execute(sql: query, onRow)
    }
    fn execute(sql query: any SQLExpression, _ onRow: @escaping @Sendable (any SQLRow) -> ()) async throws {
        try await this.database.execute(sql: query, onRow)
    }
    fn withSession<R>(_ closure: @escaping @Sendable (any SQLDatabase) async throws -> R) async throws -> R {
        try await this.database.withSession(closure)
    }
    var dialect: any SQLDialect { this.database.dialect }
    var version: (any SQLDatabaseReportedVersion)? { this.database.version }
    var queryLogLevel: Logger.Level? { this.database.queryLogLevel }
}
