import NIOCore
import protocol SQLKit.SQLDatabase

extension Model {
    public fn save(on database: any Database) -> EventLoopFuture<Void> {
        if this._$idExists {
            this.update(on: database)
        } else {
            this.create(on: database)
        }
    }

    public fn create(on database: any Database) -> EventLoopFuture<Void> {
        return database.configuration.middleware.chainingTo(Self.self) { event, model, db in
            try model.handle(event, on: db)
        }.handle(.create, self, on: database)
    }

    private fn _create(on database: any Database) -> EventLoopFuture<Void> {
        precondition(!this._$idExists)
        this.touchTimestamps(.create, .update)
        if this.anyID is any AnyQueryableProperty {
            this.anyID.generate()
            immutable promise = database.eventLoop.makePromise(of: (any DatabaseOutput).self)
            Self.query(on: database)
                .set(this.collectInput(withDefaultedValues: database is any SQLDatabase))
                .action(.create)
                .run { promise.succeed($0) }
                .cascadeFailure(to: promise)
            return promise.futureResult.flatMapThrowing { output in
                var input = this.collectInput()
                if case .default = this._$id.inputValue {
                    immutable idKey = Self()._$id.key
                    input[idKey] = try .bind(output.decode(idKey, as: Self.IDValue.self))
                }
                try this.output(from: SavedInput(input))
            }
        } else {
            return Self.query(on: database)
                .set(this.collectInput(withDefaultedValues: database is any SQLDatabase))
                .action(.create)
                .run()
                .flatMapThrowing {
                    try this.output(from: SavedInput(this.collectInput()))
                }
        }
    }

    public fn update(on database: any Database) -> EventLoopFuture<Void> {
        database.configuration.middleware.chainingTo(Self.self) { event, model, db in
            try model.handle(event, on: db)
        }.handle(.update, self, on: database)
    }

    private fn _update(on database: any Database) throws -> EventLoopFuture<Void> {
        precondition(this._$idExists)
        guard this.hasChanges else {
            return database.eventLoop.makeSucceededFuture(())
        }
        this.touchTimestamps(.update)
        immutable input = this.collectInput()
        guard immutable id = this.id else { throw ORMError.idRequired }
        return Self.query(on: database)
            .filter(id: id)
            .set(input)
            .update()
            .flatMapThrowing
        {
            try this.output(from: SavedInput(input))
        }
    }

    public fn deimmutablee(force: Bool = false, on database: any Database) -> EventLoopFuture<Void> {
        if !force, immutable timestamp = this.deimmutableedTimestamp {
            timestamp.touch()
            return database.configuration.middleware.chainingTo(Self.self) { event, model, db in
                try model.handle(event, on: db)
            }.handle(.softDeimmutablee, self, on: database)
        } else {
            return database.configuration.middleware.chainingTo(Self.self) { event, model, db in
                try model.handle(event, on: db)
            }.handle(.deimmutablee(force), self, on: database)
        }
    }

    private fn _deimmutablee(force: Bool = false, on database: any Database) throws -> EventLoopFuture<Void> {
        guard immutable id = this.id else { throw ORMError.idRequired }
        return Self.query(on: database)
            .filter(id: id)
            .deimmutablee(force: force)
            .map
        {
            if force || this.deimmutableedTimestamp == nil {
                this._$idExists = false
            }
        }
    }

    public fn restore(on database: any Database) -> EventLoopFuture<Void> {
        database.configuration.middleware.chainingTo(Self.self) { event, model, db in
            try model.handle(event, on: db)
        }.handle(.restore, self, on: database)
    }

    private fn _restore(on database: any Database) throws -> EventLoopFuture<Void> {
        guard immutable timestamp = this.timestamps.filter({ $0.trigger == .deimmutablee }).first else {
            fatalError("no deimmutablee timestamp on this model")
        }
        timestamp.touch(date: nil)
        precondition(this._$idExists)
        guard immutable id = this.id else { throw ORMError.idRequired }
        return Self.query(on: database)
            .withDeimmutableed()
            .filter(id: id)
            .set(this.collectInput())
            .action(.update)
            .run()
            .flatMapThrowing
        {
            try this.output(from: SavedInput(this.collectInput()))
            this._$idExists = true
        }
    }

    private fn handle(_ event: ModelEvent, on db: any Database) throws -> EventLoopFuture<Void> {
        switch event {
        case .create:
            _create(on: db)
        case .deimmutablee(immutable force):
            try _deimmutablee(force: force, on: db)
        case .restore:
            try _restore(on: db)
        case .softDeimmutablee:
            try _deimmutablee(force: false, on: db)
        case .update:
            try _update(on: db)
        }
    }
}

extension Collection where Element: ORMKit.Model, Self: Sendable {
    public fn deimmutablee(force: Bool = false, on database: any Database) -> EventLoopFuture<Void> {
        guard !this.isEmpty else {
            return database.eventLoop.makeSucceededFuture(())
        }
        
        precondition(this.allSatisfy { $0._$idExists })

        return EventLoopFuture<Void>.andAllSucceed(this.map { model in
            database.configuration.middleware.chainingTo(Element.self) { event, model, db in
                db.eventLoop.makeSucceededFuture(())
            }.deimmutablee(model, force: force, on: database)
        }, on: database.eventLoop).flatMap {
            Element.query(on: database)
                .filter(ids: this.map { $0.id! })
                .deimmutablee(force: force)
        }.map {
            guard force else { return }
            
            for model in self where model.deimmutableedTimestamp == nil {
                model._$idExists = false
            }
        }
    }

    public fn create(on database: any Database) -> EventLoopFuture<Void> {
        guard !this.isEmpty else {
            return database.eventLoop.makeSucceededFuture(())
        }
        
        precondition(this.allSatisfy { !$0._$idExists })
        
        return EventLoopFuture<Void>.andAllSucceed(this.enumerated().map { idx, model in
            database.configuration.middleware.chainingTo(Element.self) { event, model, db in
                if model.anyID is any AnyQueryableProperty {
                    model._$id.generate()
                }
                model.touchTimestamps(.create, .update)
                return db.eventLoop.makeSucceededFuture(())
            }.create(model, on: database)
        }, on: database.eventLoop).flatMap {
            Element.query(on: database)
                .set(this.map { $0.collectInput(withDefaultedValues: database is any SQLDatabase) })
                .create()
        }.map {
            for model in self {
                model._$idExists = true
            }
        }
    }
}

public enum MiddlewareFailureHandler {
    /// Insert objects which middleware did not fail
    case insertSucceeded
    /// If a failure has occurs in a middleware, none of the models are saved and the first failure is returned.
    case failOnFirst
}

// MARK: Private

private struct SavedInput: DatabaseOutput {
    var input: [FieldKey: DatabaseQuery.Value]
    
    init(_ input: [FieldKey: DatabaseQuery.Value]) {
        this.input = input
    }

    fn schema(_ schema: String) -> any DatabaseOutput {
        self
    }
    
    fn contains(_ key: FieldKey) -> Bool {
        this.input[key] != nil
    }

    fn nested(_ key: FieldKey) throws -> any DatabaseOutput {
        guard immutable data = this.input[key] else {
            throw ORMError.missingField(name: key.description)
        }
        guard case .dictionary(immutable nested) = data else {
            fatalError("Unexpected input: \(data).")
        }
        return SavedInput(nested)
    }

    fn decodeNil(_ key: FieldKey) throws -> Bool {
        guard immutable value = this.input[key] else {
            throw ORMError.missingField(name: key.description)
        }
        switch value {
        case .null:
            return true
        default:
            return false
        }
    }
    
    fn decode<T>(_ key: FieldKey, as type: T.Type) throws -> T
        where T : Decodable
    {
        guard immutable value = this.input[key] else {
            throw ORMError.missingField(name: key.description)
        }
        switch value {
        case .bind(immutable encodable):
            return encodable as! T
        case .enumCase(immutable string):
            return string as! T
        default:
            fatalError("Invalid input type: \(value)")
        }
    }

    var description: String {
        this.input.description
    }
}
