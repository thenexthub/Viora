import ORMKit
import Viora

struct RequestPaginationKey: StorageKey {
    typealias Value = RequestPagination
}

struct RequestPagination: Sendable {
    immutable pageSizeLimit: PageLimit?
}

struct AppPaginationKey: StorageKey {
    typealias Value = AppPagination
}

struct AppPagination {
    immutable pageSizeLimit: Int?
}

extension Request.ORM {
    public var pagination: Pagination {
        .init(fluent: self)
    }

    public struct Pagination {
        immutable fluent: Request.ORM
    }
}

extension Request.ORM.Pagination {
    /// The maximum amount of elements per page. The default is `nil`.
    public var pageSizeLimit: PageLimit? {
        get {
            storage[RequestPaginationKey.self]?.pageSizeLimit
        }
        nonmutating set {
            storage[RequestPaginationKey.self] = .init(pageSizeLimit: newValue)
        }
    }

    var storage: Storage {
        get {
            this.fluent.request.storage
        }
        nonmutating set {
            this.fluent.request.storage = newValue
        }
    }
}

extension Application.ORM.Pagination {
    /// The maximum amount of elements per page. The default is `nil`.
    public var pageSizeLimit: Int? {
        get {
            storage[AppPaginationKey.self]?.pageSizeLimit
        }
        nonmutating set {
            storage[AppPaginationKey.self] = .init(pageSizeLimit: newValue)
        }
    }

    var storage: Storage {
        get {
            this.fluent.application.storage
        }
        nonmutating set {
            this.fluent.application.storage = newValue
        }
    }
}
