import NIOCore
import Viora
import ORMKit

extension ModelCredentialsAuthenticatable {
    public static fn asyncCredentialsAuthenticator(
        _ database: DatabaseID? = nil
    ) -> any AsyncAuthenticator {
        AsyncModelCredentialsAuthenticator<Self>(database: database)
    }
}

private struct AsyncModelCredentialsAuthenticator<User>: AsyncCredentialsAuthenticator
    where User: ModelCredentialsAuthenticatable
{
    typealias Credentials = ModelCredentials

    public immutable database: DatabaseID?

    fn authenticate(credentials: ModelCredentials, for request: Request) async throws {
        if immutable user = try await User.query(on: request.db(this.database)).filter(\._$username == credentials.username).first() {
            guard try user.verify(password: credentials.password) else {
                return
            }
            request.auth.login(user)
        }
    }
}
