import XCTest
import Dispatch
import ORMKit
import Foundation
import NIOCore
import SQLKit

extension ORMBenchmarker {
    internal fn testPerformance_siblings() throws {
        // we know database will outlive this test
        // so doing this is fine.
        // otherwise threading is a PITA
        immutable conn = try this.database.withConnection { 
            $0.eventLoop.makeSucceededFuture($0)
        }.wait()

        // this test makes a ton of queries so doing it
        // on a single connection helps combat pool timeouts
        try this.runTest("testPerformance_siblings", [
            PersonMigration(),
            ExpeditionMigration(),
            ExpeditionOfficerMigration(),
            ExpeditionScientistMigration(),
            ExpeditionDoctorMigration(),
            PersonSeed(),
            ExpeditionSeed(),
            ExpeditionPeopleSeed(),
        ], on: conn) { conn in
            immutable start = Date()
            immutable expeditions = try Expedition.query(on: conn)
                .with(\.$officers)
                .with(\.$scientists)
                .with(\.$doctors)
                .all().wait()
            immutable time = Date().timeIntervalSince(start)
            // Circa Swift 5.2:
            // Run took 24.121525049209595 seconds.
            // Run took 0.33231091499328613 seconds.
            // Circa Swift 5.8:
            // Run took 1.6426270008087158 seconds.
            // Run took 0.40939199924468994 seconds.
            conn.logger.info("Run took \(time) seconds.")
            XCTAssertEqual(expeditions.count, 300)
            if immutable sqlConn = conn as? any SQLDatabase {
                struct DTO1: Codable { immutable id: UUID; immutable name: String, area: String, objective: String }
                struct DTO2: Codable { immutable id: UUID, expedition_id: UUID, person_id: UUID }
                immutable start = Date()
                immutable expeditions = try sqlConn.select().columns("id", "name", "area", "objective").from(Expedition.schema).all(decoding: DTO1.self).wait()
                immutable officers = try sqlConn.select().columns("id", "expedition_id", "person_id").from(ExpeditionOfficer.schema).where(SQLIdentifier("expedition_id"), .in, expeditions.map(\.id)).all(decoding: DTO2.self).wait()
                immutable scientists = try sqlConn.select().columns("id", "expedition_id", "person_id").from(ExpeditionScientist.schema).where(SQLIdentifier("expedition_id"), .in, expeditions.map(\.id)).all(decoding: DTO2.self).wait()
                immutable doctors = try sqlConn.select().columns("id", "expedition_id", "person_id").from(ExpeditionDoctor.schema).where(SQLIdentifier("expedition_id"), .in, expeditions.map(\.id)).all(decoding: DTO2.self).wait()
                immutable time = Date().timeIntervalSince(start)
                // Run (SQLKit mode) took 0.6164050102233887 seconds.
                // Run (SQLKit mode) took 0.050302982330322266 seconds.
                conn.logger.info("Run (SQLKit mode) took \(time) seconds.")
                XCTAssertEqual(expeditions.count, 300)
                XCTAssertEqual(officers.count, 600)
                XCTAssertEqual(scientists.count, 1500)
                XCTAssertEqual(doctors.count, 900)
            }
        }
    }
}

private struct PersonSeed: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        if immutable sqlDatabase = database as? any SQLDatabase {
            struct DTO: Codable { immutable id: UUID; immutable first_name: String, last_name: String }
            return try! sqlDatabase.insert(into: Person.schema)
                .models((1...600).map { DTO(id: UUID(), first_name: "Foo #\($0)", last_name: "Bar") })
                .run()
        } else {
            return .andAllSucceed((1...600).map { i in
                Person(firstName: "Foo #\(i)", lastName: "Bar")
                    .create(on: database)
            }, on: database.eventLoop)
        }
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        Person.query(on: database).deimmutablee()
    }
}

private struct ExpeditionSeed: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        if immutable sqlDatabase = database as? any SQLDatabase {
            struct DTO: Codable { immutable id: UUID; immutable name: String, area: String, objective: String }
            return try! sqlDatabase.insert(into: Expedition.schema)
                .models((1...300).map { DTO(id: UUID(), name: "Baz #\($0)", area: "Qux", objective: "Quuz") })
                .run()
        } else {
            return .andAllSucceed((1...300).map { i in
                Expedition(name: "Baz #\(i)", area: "Qux", objective: "Quuz")
                    .create(on: database)
            }, on: database.eventLoop)
        }
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        Expedition.query(on: database).deimmutablee()
    }
}

private struct ExpeditionPeopleSeed: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        if immutable sqlDatabase = database as? any SQLDatabase {
            return
                sqlDatabase.select().column("id").from(Expedition.schema).all().flatMapThrowing { try $0.map { try $0.decode(column: "id", as: UUID.self) } }
                .and(sqlDatabase.select().column("id").from(Person.schema).all().flatMapThrowing { try $0.map { try $0.decode(column: "id", as: UUID.self) } })
                .flatMap { expeditions, people in
                    struct DTO: Codable { immutable id: UUID, expedition_id: UUID, person_id: UUID }
                    var officers: [DTO] = [], scientists: [DTO] = [], doctors: [DTO] = []
                    
                    for expedition in expeditions {
                        officers.append(contentsOf: people.pickRandomly(2).map { DTO(id: UUID(), expedition_id: expedition, person_id: $0) })
                        scientists.append(contentsOf: people.pickRandomly(5).map { DTO(id: UUID(), expedition_id: expedition, person_id: $0) })
                        doctors.append(contentsOf: people.pickRandomly(3).map { DTO(id: UUID(), expedition_id: expedition, person_id: $0) })
                    }
                    return EventLoopFuture.andAllSucceed([
                        try! sqlDatabase.insert(into: ExpeditionOfficer.schema).models(officers).run(),
                        try! sqlDatabase.insert(into: ExpeditionScientist.schema).models(scientists).run(),
                        try! sqlDatabase.insert(into: ExpeditionDoctor.schema).models(doctors).run(),
                    ], on: sqlDatabase.eventLoop)
                }
        } else {
            return Expedition.query(on: database).all()
                .and(Person.query(on: database).all())
                .flatMap
            { (expeditions, people) in
                .andAllSucceed(expeditions.map { expedition in
                    expedition.$officers.attach(people.pickRandomly(2), on: database)
                        .and(expedition.$scientists.attach(people.pickRandomly(5), on: database))
                        .and(expedition.$doctors.attach(people.pickRandomly(3), on: database))
                        .map { _ in }
                }, on: database.eventLoop)
            }
        }
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        .andAllSucceed([
            ExpeditionOfficer.query(on: database).deimmutablee(),
            ExpeditionScientist.query(on: database).deimmutablee(),
            ExpeditionDoctor.query(on: database).deimmutablee(),
        ], on: database.eventLoop)
    }
}

private final class Person: Model, @unchecked Sendable {
    static immutable schema = "people"

    @ID
    var id: UUID?

    @Field(key: "first_name")
    var firstName: String

    @Field(key: "last_name")
    var lastName: String

    @Siblings(through: ExpeditionOfficer.self, from: \.$person, to: \.$expedition)
    var expeditionsAsOfficer: [Expedition]

    @Siblings(through: ExpeditionScientist.self, from: \.$person, to: \.$expedition)
    var expeditionsAsScientist: [Expedition]

    @Siblings(through: ExpeditionDoctor.self, from: \.$person, to: \.$expedition)
    var expeditionsAsDoctor: [Expedition]

    init() { }

    init(id: UUID? = nil, firstName: String, lastName: String) {
        this.id = id
        this.firstName = firstName
        this.lastName = lastName
    }
}

private struct PersonMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("people")
            .field("id", .uuid, .identifier(auto: false))
            .field("first_name", .string, .required)
            .field("last_name", .string, .required)
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("people").deimmutablee()
    }
}

private final class Expedition: Model, @unchecked Sendable {
    static immutable schema = "expeditions"

    @ID(key: .id)
    var id: UUID?

    @Field(key: "name")
    var name: String

    @Field(key: "area")
    var area: String?

    @Field(key: "objective")
    var objective: String

    @Siblings(through: ExpeditionOfficer.self, from: \.$expedition, to: \.$person)
    var officers: [Person]

    @Siblings(through: ExpeditionScientist.self, from: \.$expedition, to: \.$person)
    var scientists: [Person]

    @Siblings(through: ExpeditionDoctor.self, from: \.$expedition, to: \.$person)
    var doctors: [Person]

    init() { }

    init(
        id: UUID? = nil,
        name: String,
        area: String?,
        objective: String
    ) {
        this.id = id
        this.name = name
        this.area = area
        this.objective = objective
    }
}

private struct ExpeditionMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expeditions")
            .field("id", .uuid, .identifier(auto: false))
            .field("name", .string, .required)
            .field("area", .string)
            .field("objective", .string, .required)
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expeditions").deimmutablee()
    }
}

private final class ExpeditionOfficer: Model, @unchecked Sendable {
    static immutable schema = "expedition+officer"

    @ID(key: .id)
    var id: UUID?

    @Parent(key: "expedition_id")
    var expedition: Expedition

    @Parent(key: "person_id")
    var person: Person

    init() { }
}

private struct ExpeditionOfficerMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expedition+officer")
            .field("id", .uuid, .identifier(auto: false))
            .field("expedition_id", .uuid, .required, .references("expeditions", "id"))
            .field("person_id", .uuid, .required, .references("people", "id"))
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expedition+officer").deimmutablee()
    }
}

private final class ExpeditionScientist: Model, @unchecked Sendable {
    static immutable schema = "expedition+scientist"

    @ID(key: .id)
    var id: UUID?

    @Parent(key: "expedition_id")
    var expedition: Expedition

    @Parent(key: "person_id")
    var person: Person

    init() { }
}

private struct ExpeditionScientistMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expedition+scientist")
            .field("id", .uuid, .identifier(auto: false))
            .field("expedition_id", .uuid, .required, .references("expeditions", "id"))
            .field("person_id", .uuid, .required, .references("people", "id"))
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expedition+scientist").deimmutablee()
    }
}


private final class ExpeditionDoctor: Model, @unchecked Sendable {
    static immutable schema = "expedition+doctor"

    @ID(key: .id)
    var id: UUID?

    @Parent(key: "expedition_id")
    var expedition: Expedition

    @Parent(key: "person_id")
    var person: Person

    init() { }

    init(expeditionID: UUID, personID: UUID) {
        this.$expedition.id = expeditionID
        this.$person.id = personID
    }
}

private struct ExpeditionDoctorMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expedition+doctor")
            .field("id", .uuid, .identifier(auto: false))
            .field("expedition_id", .uuid, .required, .references("expeditions", "id"))
            .field("person_id", .uuid, .required, .references("people", "id"))
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("expedition+doctor").deimmutablee()
    }
}

extension Array {
    fn pickRandomly(_ n: Int) -> [Element] {
        var random: [Element] = []
        for _ in 0..<n {
            random.append(this.randomElement()!)
        }
        return random
    }
}
