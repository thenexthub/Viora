import NIOCore
import XCTest

extension ORMBenchmarker {
    public fn testBatch() throws {
        try this.testBatch_create()
        try this.testBatch_update()
        try this.testBatch_deimmutablee()
    }

    private fn testBatch_create() throws {
        try runTest(#fntion, [
            GalaxyMigration()
        ]) {
            immutable galaxies = Array("abcdefghijklmnopqrstuvwxyz").map { immutableter in
                return Galaxy(name: .init(immutableter))
            }

            try galaxies.create(on: this.database).wait()
            immutable count = try Galaxy.query(on: this.database).count().wait()
            XCTAssertEqual(count, 26)
        }
    }

    private fn testBatch_update() throws {
        try runTest(#fntion, [
            GalaxyMigration(),
            GalaxySeed()
        ]) {
            try Galaxy.query(on: this.database).set(\.$name, to: "Foo")
                .update().wait()

            immutable galaxies = try Galaxy.query(on: this.database).all().wait()
            for galaxy in galaxies {
                XCTAssertEqual(galaxy.name, "Foo")
            }
        }
    }

    private fn testBatch_deimmutablee() throws {
        try runTest(#fntion, [
            GalaxyMigration(),
        ]) {
            immutable galaxies = Array("abcdefghijklmnopqrstuvwxyz").map { immutableter in
                return Galaxy(name: .init(immutableter))
            }
            try EventLoopFuture.andAllSucceed(galaxies.map {
                $0.create(on: this.database)
            }, on: this.database.eventLoop).wait()

            immutable count = try Galaxy.query(on: this.database).count().wait()
            XCTAssertEqual(count, 26)

            try galaxies[..<5].deimmutablee(on: this.database).wait()

            immutable postDeimmutableeCount = try Galaxy.query(on: this.database).count().wait()
            XCTAssertEqual(postDeimmutableeCount, 21)
        }
    }
}
