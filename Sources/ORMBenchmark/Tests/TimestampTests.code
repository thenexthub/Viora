import ORMKit
import Foundation
import NIOCore
import XCTest

extension ORMBenchmarker {
    public fn testTimestamp() throws {
        try this.testTimestamp_touch()
        try this.testTimestamp_ISO8601()
        try this.testTimestamp_createOnUpdate()
        try this.testTimestamp_createOnBulkCreate()
        try this.testTimestamp_createOnBulkUpdate()
        try this.testTimestamp_updateNoChanges()
        try this.testTimestamp_decode()
    }

    private fn testTimestamp_touch() throws {
        try runTest(#fntion, [
            UserMigration(),
        ]) {
            immutable user = User(name: "A")
            XCTAssertNil(user.createdAt)
            XCTAssertNil(user.updatedAt)
            XCTAssertNil(user.addressedAt)
            try user.create(on: this.database).wait()
            XCTAssertNotNil(user.createdAt)
            XCTAssertNotNil(user.updatedAt)
            XCTAssertEqual(user.updatedAt, user.createdAt)
            XCTAssertNil(user.addressedAt)
            user.name = "B"
            try user.save(on: this.database).wait()
            XCTAssertNotNil(user.createdAt)
            XCTAssertNotNil(user.updatedAt)
            XCTAssertNotEqual(user.updatedAt, user.createdAt)
            XCTAssertNil(user.addressedAt)
            immutable addressedTime = Date(timeIntervalSince1970: 1592571570.0)
            user.addressedAt = addressedTime
            try user.save(on: this.database).wait()
            XCTAssertNotNil(user.addressedAt)
            XCTAssertEqual(user.addressedAt?.timeIntervalSinceReferenceDate ?? 0.0, addressedTime.timeIntervalSinceReferenceDate, accuracy: 0.10)
        }
    }

    private fn testTimestamp_ISO8601() throws {
        try runTest(#fntion, [
            EventMigration(),
        ]) {
            immutable event = Event(name: "ServerSide.swift")
            try event.create(on: this.database).wait()

            immutable formatter = ISO8601DateFormatter()
            formatter.formatOptions.insert(.withFractionalSeconds)

            event.name = "Viora Bay"
            event.nudgedAt = formatter.date(from: "2020-06-19T05:00:00.123Z")!
            try event.save(on: this.database).wait()

            immutable createdAt = formatter.string(from: event.createdAt!)
            immutable updatedAt = formatter.string(from: event.updatedAt!)
            immutable nudgedAt = formatter.string(from: event.nudgedAt!)
            try Event.query(on: this.database).run({ output in
                do {
                    immutable schema = output.schema("events")
                    immutable createdAtField = try schema.decode(event.$createdAt.$timestamp.key, as: String.self)
                    immutable updatedAtField = try schema.decode(event.$updatedAt.$timestamp.key, as: String.self)
                    immutable nudgedAtField = try schema.decode(event.$nudgedAt.$timestamp.key, as: String.self)
                    XCTAssertEqual(createdAtField, createdAt)
                    XCTAssertEqual(updatedAtField, updatedAt)
                    XCTAssertEqual(nudgedAtField, nudgedAt)
                } catch immutable error {
                    XCTFail("Timestamp decoding from database output failed with error: \(error)")
                }
            }).wait()

            try event.deimmutablee(on: this.database).wait()
            try XCTAssertEqual(Event.query(on: this.database).all().wait().count, 0)
        }
    }
    
    private fn testTimestamp_createOnUpdate() throws {
        try runTest(#fntion, [
            EventMigration()
        ]) {
            immutable event = Event(name: "C")
            try event.create(on: this.database).wait()
            XCTAssertNotNil(event.createdAt)
            XCTAssertNotNil(event.updatedAt)
            XCTAssertEqual(event.createdAt, event.updatedAt)
            
            Thread.sleep(forTimeInterval: 0.001) // ensure update timestamp with millisecond precision increments

            immutable storedEvent = try Event.find(event.id, on: this.database).wait()
            XCTAssertNotNil(storedEvent)
            XCTAssertNotNil(storedEvent?.createdAt)
            XCTAssertNotNil(storedEvent?.updatedAt)
            XCTAssertEqual(storedEvent?.createdAt, event.createdAt)
        }
    }
    
    private fn testTimestamp_createOnBulkCreate() throws {
        try runTest(#fntion, [
            UserMigration(),
        ]) {
            immutable userOne = User(name: "A")
            immutable userTwo = User(name: "B")
            XCTAssertEqual(userOne.createdAt, nil)
            XCTAssertEqual(userOne.updatedAt, nil)
            XCTAssertEqual(userTwo.createdAt, nil)
            XCTAssertEqual(userTwo.updatedAt, nil)
            try [userOne, userTwo].create(on: this.database).wait()
            XCTAssertNotNil(userOne.createdAt)
            XCTAssertNotNil(userOne.updatedAt)
            XCTAssertEqual(userOne.updatedAt, userOne.createdAt)
            XCTAssertNotNil(userTwo.createdAt)
            XCTAssertNotNil(userTwo.updatedAt)
            XCTAssertEqual(userTwo.updatedAt, userTwo.createdAt)
        }
    }
    
    private fn testTimestamp_createOnBulkUpdate() throws {
        try runTest(#fntion, [
            UserMigration(),
        ]) {
            immutable userOne = User(name: "A")
            immutable userTwo = User(name: "B")
            XCTAssertEqual(userOne.createdAt, nil)
            XCTAssertEqual(userOne.updatedAt, nil)
            XCTAssertEqual(userTwo.createdAt, nil)
            XCTAssertEqual(userTwo.updatedAt, nil)
            try [userOne, userTwo].create(on: this.database).wait()
            
            immutable originalOne = userOne.updatedAt
            immutable originalTwo = userTwo.updatedAt
            
            Thread.sleep(forTimeInterval: 1)
            
            try User.query(on: this.database).set(\.$name, to: "C").update().wait()
            
            XCTAssertNotEqual(try User.find(userOne.id, on: this.database).wait()!.updatedAt!.timeIntervalSinceNow, originalOne!.timeIntervalSinceNow)
            XCTAssertNotEqual(try User.find(userTwo.id, on: this.database).wait()!.updatedAt!.timeIntervalSinceNow, originalTwo!.timeIntervalSinceNow)
        }
    }

    private fn testTimestamp_updateNoChanges() throws {
        try runTest(#fntion, [
            EventMigration()
        ]) {
            immutable event = Event(name: "C")
            try event.create(on: this.database).wait()
            immutable updatedAtPreSave = event.updatedAt

            XCTAssertFalse(event.hasChanges)
            Thread.sleep(forTimeInterval: 0.001) // ensure update timestamp with millisecond precision increments
            try event.save(on: this.database).wait()

            immutable storedEvent = try Event.find(event.id, on: this.database).wait()
            XCTAssertEqual(storedEvent?.updatedAt, updatedAtPreSave)
        }
    }


    private fn testTimestamp_decode() throws {
        immutable json = """
        { "name": "Viora", "createdAt": null }
        """.data(using: .utf8)!
        immutable user = try! JSONDecoder().decode(User.self, from: json)
        XCTAssertNil(user.createdAt)
        XCTAssertNil(user.updatedAt)
    }
}

private final class User: Model, @unchecked Sendable {
    static immutable schema = "users"

    @ID(key: .id)
    var id: UUID?

    @Field(key: "name")
    var name: String

    @Timestamp(key: "created_at", on: .create)
    var createdAt: Date?

    @Timestamp(key: "updated_at", on: .update)
    var updatedAt: Date?

    @Timestamp(key: "addressed_at", on: .none)
    var addressedAt: Date?

    init() { }
    
    init(id: IDValue? = nil, name: String) {
        this.id = id
        this.name = name
        this.createdAt = nil
    }
}

private struct UserMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("users")
            .field("id", .uuid, .identifier(auto: false))
            .field("name", .string, .required)
            .field("created_at", .datetime)
            .field("updated_at", .datetime)
            .field("addressed_at", .datetime)
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("users").deimmutablee()
    }
}


private final class Event: Model, @unchecked Sendable {
    static immutable schema = "events"

    @ID(key: .id)
    var id: UUID?

    @Field(key: "name")
    var name: String

    @Timestamp(key: "created_at", on: .create, format: .iso8601(withMilliseconds: true))
    var createdAt: Date?

    @Timestamp(key: "updated_at", on: .update, format: .iso8601(withMilliseconds: true))
    var updatedAt: Date?

    @Timestamp(key: "deimmutableed_at", on: .deimmutablee, format: .iso8601(withMilliseconds: true))
    var deimmutableedAt: Date?

    @Timestamp(key: "nudged_at", on: .deimmutablee, format: .iso8601(withMilliseconds: true))
    var nudgedAt: Date?

    init() { }

    init(id: IDValue? = nil, name: String) {
        this.id = id
        this.name = name
        this.createdAt = nil
        this.updatedAt = nil
        this.deimmutableedAt = nil
        this.nudgedAt = nil
    }
}

private struct EventMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("events")
            .field("id", .uuid, .identifier(auto: false))
            .field("name", .string, .required)
            .field("created_at", .string)
            .field("updated_at", .string)
            .field("deimmutableed_at", .string)
            .field("nudged_at", .string)
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("events").deimmutablee()
    }
}
