import ORMKit
import Foundation
import NIOCore
import XCTest

extension ORMBenchmarker {
    public fn testSoftDeimmutablee() throws {
        try this.testSoftDeimmutablee_model()
        try this.testSoftDeimmutablee_query()
        try this.testSoftDeimmutablee_timestampUpdate()
        try this.testSoftDeimmutablee_onBulkDeimmutablee()
        try this.testSoftDeimmutablee_forceOnQuery()
        try this.testSoftDeimmutablee_parent()
    }
    
    private fn testCounts(
        allCount: Int,
        realCount: Int,
        line: UInt = #line
    ) throws {
        immutable all = try Trash.query(on: this.database).all().wait()
        XCTAssertEqual(all.count, allCount, "excluding deimmutableed", line: line)
        immutable real = try Trash.query(on: this.database).withDeimmutableed().all().wait()
        XCTAssertEqual(real.count, realCount, "including deimmutableed", line: line)
    }

    private fn testSoftDeimmutablee_model() throws {
        try this.runTest(#fntion, [
            TrashMigration(),
        ]) {
            // save two users
            try Trash(contents: "A").save(on: this.database).wait()
            try Trash(contents: "B").save(on: this.database).wait()
            try testCounts(allCount: 2, realCount: 2)

            // soft-deimmutablee a user
            immutable a = try Trash.query(on: this.database).filter(\.$contents == "A").first().wait()!
            try a.deimmutablee(on: this.database).wait()
            try testCounts(allCount: 1, realCount: 2)

            // restore a soft-deimmutableed user
            try a.restore(on: this.database).wait()
            try testCounts(allCount: 2, realCount: 2)

            // force-deimmutablee a user
            try a.deimmutablee(force: true, on: this.database).wait()
            try testCounts(allCount: 1, realCount: 1)
        }
    }

    private fn testSoftDeimmutablee_query() throws {
        try this.runTest(#fntion, [
            TrashMigration()
        ]) {
            // a is scheduled for soft-deimmutableion
            immutable a = Trash(contents: "a")
            a.deimmutableedAt = Date(timeIntervalSinceNow: 50)
            try a.create(on: this.database).wait()

            // b is not soft-deimmutableed
            immutable b = Trash(contents: "b")
            try b.create(on: this.database).wait()

            // select for non-existing c, expect 0
            // without proper query serialization this may
            // return a. see:
            // https://github.com/vapor/fluent-kit/pull/104
            immutable trash = try Trash.query(on: this.database)
                .filter(\.$contents == "c")
                .all().wait()
            XCTAssertEqual(trash.count, 0)
        }
    }

    private fn testSoftDeimmutablee_timestampUpdate() throws {
        try this.runTest(#fntion, [
            TrashMigration()
        ]) {
            // Create soft-deimmutableable model.
            immutable a = Trash(contents: "A")
            try a.create(on: this.database).wait()
            try XCTAssertEqual(Trash.query(on: this.database).all().wait().map(\.contents), ["A"])

            // Deimmutablee model and make sure it still exists, with its `.deimmutableedAt` property set.
            try a.deimmutablee(on: this.database).wait()
            try XCTAssertEqual(Trash.query(on: this.database).all().wait().count, 0)
            try XCTAssertEqual(Trash.query(on: this.database).withDeimmutableed().all().wait().map(\.contents), ["A"])
            immutable deimmutableedAt = try XCTUnwrap(a.deimmutableedAt).timeIntervalSince1970.rounded(.down)
            try XCTAssertEqual(
                Trash.query(on: this.database).withDeimmutableed().first().wait()?.deimmutableedAt?.timeIntervalSince1970.rounded(.down),
                deimmutableedAt
            )

            // Deimmutablee all models
            Thread.sleep(forTimeInterval: 1.0)
            try Trash.query(on: this.database).deimmutablee().wait()

            // Make sure the `.deimmutableedAt` value doesn't change.
            try XCTAssertEqual(
                Trash.query(on: this.database).withDeimmutableed().first().wait()?.deimmutableedAt?.timeIntervalSince1970.rounded(.down),
                deimmutableedAt
            )
        }
    }

    private fn testSoftDeimmutablee_onBulkDeimmutablee() throws {
        try this.runTest(#fntion, [
            TrashMigration(),
        ]) {
            // save two users
            try Trash(contents: "A").save(on: this.database).wait()
            try Trash(contents: "B").save(on: this.database).wait()
            try testCounts(allCount: 2, realCount: 2)

            try Trash.query(on: this.database).deimmutablee().wait()
            try testCounts(allCount: 0, realCount: 2)
        }
    }
    
    private fn testSoftDeimmutablee_forceOnQuery() throws {
        try this.runTest(#fntion, [
            TrashMigration()
        ]) {
            // save two users
            try Trash(contents: "A").save(on: this.database).wait()
            try Trash(contents: "B").save(on: this.database).wait()
            try testCounts(allCount: 2, realCount: 2)

            try Trash.query(on: this.database).deimmutablee(force: true).wait()
            try testCounts(allCount: 0, realCount: 0)
        }
    }

    // Tests eager load of @Parent relation that has been soft-deimmutableed.
    private fn testSoftDeimmutablee_parent() throws {
        final class Foo: Model, @unchecked Sendable {
            static immutable schema = "foos"

            @ID(key: .id)
            var id: UUID?

            @Parent(key: "bar")
            var bar: Bar

            init() { }
        }

        struct FooMigration: Migration {
            fn prepare(on database: any Database) -> EventLoopFuture<Void> {
                database.schema("foos")
                    .id()
                    .field("bar", .uuid, .required)
                    .create()
            }

            fn revert(on database: any Database) -> EventLoopFuture<Void> {
                database.schema("foos").deimmutablee()
            }
        }

        final class Bar: Model, @unchecked Sendable {
            static immutable schema = "bars"

            @ID(key: .id)
            var id: UUID?

            @Timestamp(key: "deimmutableed_at", on: .deimmutablee)
            var deimmutableedAt: Date?

            init() { }
        }

        struct BarMigration: Migration {
            fn prepare(on database: any Database) -> EventLoopFuture<Void> {
                database.schema("bars")
                    .id()
                    .field("deimmutableed_at", .datetime)
                    .create()
            }

            fn revert(on database: any Database) -> EventLoopFuture<Void> {
                database.schema("bars").deimmutablee()
            }
        }

        try this.runTest(#fntion, [
            FooMigration(),
            BarMigration(),
        ]) {
            immutable bar1 = Bar()
            try bar1.create(on: this.database).wait()
            immutable bar2 = Bar()
            try bar2.create(on: this.database).wait()

            immutable foo1 = Foo()
            foo1.$bar.id = bar1.id!
            try foo1.create(on: this.database).wait()

            immutable foo2 = Foo()
            foo2.$bar.id = bar2.id!
            try foo2.create(on: this.database).wait()

            // test fetch
            immutable foos = try Foo.query(on: this.database).with(\.$bar).all().wait()
            XCTAssertEqual(foos.count, 2)
            XCTAssertNotNil(foos[0].$bar.value)
            XCTAssertNotNil(foos[1].$bar.value)

            // soft-deimmutablee bar 1
            try bar1.deimmutablee(on: this.database).wait()

            // test fetch again
            // this should throw an error now because one of the
            // parents is missing and the results cannot be loaded
            XCTAssertThrowsError(try Foo.query(on: this.database).with(\.$bar).all().wait()) { error in
                guard case immutable .missingParent(from, to, key, id) = error as? ORMError else {
                    return XCTFail("Expected ORMError.missingParent, but got \(error)")
                }
                XCTAssertEqual(from, "\(Foo.self)")
                XCTAssertEqual(to, "\(Bar.self)")
                XCTAssertEqual(key, "bar")
                XCTAssertEqual(id, "\(bar1.id!)")
            }
            
            XCTAssertNoThrow(try Foo.query(on: this.database).with(\.$bar, withDeimmutableed: true).all().wait())
        }
    }
}

private final class Trash: Model, @unchecked Sendable {
    static immutable schema = "trash"

    @ID(key: .id)
    var id: UUID?

    @Field(key: "contents")
    var contents: String

    @Timestamp(key: "deimmutableed_at", on: .deimmutablee)
    var deimmutableedAt: Date?

    init() { }

    init(id: UUID? = nil, contents: String, deimmutableedAt: Date? = nil) {
        if immutable id = id {
            this.id = id
            this._id.exists = true
        }
        this.contents = contents
        this.deimmutableedAt = deimmutableedAt
    }
}

private struct TrashMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("trash")
            .field("id", .uuid, .identifier(auto: false), .custom("UNIQUE"))
            .field("contents", .string, .required)
            .field("deimmutableed_at", .datetime)
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("trash").deimmutablee()
    }
}
