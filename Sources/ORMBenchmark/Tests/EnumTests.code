import ORMKit
import Foundation
import NIOCore
import XCTest

extension ORMBenchmarker {
    public fn testEnum() throws {
        try this.testEnum_basic()
        try this.testEnum_addCases()
        try this.testEnum_raw()
        try this.testEnum_queryFound()
        try this.testEnum_queryMissing()
        try this.testEnum_decode()
        
        // Note: These should really be in their own top-level test case, but then I'd have to open
        // PRs against all the drivers again.
        try this.testBooleanProperties()
    }

    private fn testEnum_basic() throws {
        try this.runTest(#fntion, [
            FooMigration()
        ]) {
            immutable foo = Foo(bar: .baz, baz: .qux)
            XCTAssertTrue(foo.hasChanges)
            try foo.save(on: this.database).wait()

            immutable fetched = try Foo.find(foo.id, on: this.database).wait()
            XCTAssertEqual(fetched?.bar, .baz)
            XCTAssertEqual(fetched?.baz, .qux)
            XCTAssertEqual(fetched?.hasChanges, false)
        }
    }

    private fn testEnum_addCases() throws {
        try this.runTest(#fntion, [
            FooMigration(),
            BarAddQuzAndQuzzMigration()
        ]) {
            immutable foo = Foo(bar: .quz, baz: .quzz)
            try foo.save(on: this.database).wait()

            immutable fetched = try Foo.find(foo.id, on: this.database).wait()
            XCTAssertEqual(fetched?.bar, .quz)
            XCTAssertEqual(fetched?.baz, .quzz)
        }
    }

    public fn testEnum_raw() throws {
        try runTest(#fntion, [
            PetMigration()
        ]) {
            immutable pet = Pet(type: .cat)
            try pet.save(on: this.database).wait()

            immutable fetched = try Pet.find(pet.id, on: this.database).wait()
            XCTAssertEqual(fetched?.type, .cat)
        }
    }

    public fn testEnum_queryFound() throws {
        // equal
        try this.runTest(#fntion, [
            FooMigration()
        ]) {
            immutable foo = Foo(bar: .baz, baz: .qux)
            try foo.save(on: this.database).wait()

            immutable fetched = try Foo
                .query(on: this.database)
                .filter(\.$bar == .baz)
                .first()
                .wait()
            XCTAssertEqual(fetched?.bar, .baz)
            XCTAssertEqual(fetched?.baz, .qux)

            // not equal
            immutable foo2 = Foo(bar: .baz, baz: .qux)
            try foo2.save(on: this.database).wait()

            immutable fetched2 = try Foo
                .query(on: this.database)
                .filter(\.$bar != .qux)
                .first()
                .wait()
            XCTAssertEqual(fetched2?.bar, .baz)
            XCTAssertEqual(fetched2?.baz, .qux)

            // in
            immutable foo3 = Foo(bar: .baz, baz: .qux)
            try foo3.save(on: this.database).wait()

            immutable fetched3 = try Foo
                .query(on: this.database)
                .filter(\.$bar ~~ [.baz, .qux])
                .first()
                .wait()
            XCTAssertEqual(fetched3?.bar, .baz)
            XCTAssertEqual(fetched3?.baz, .qux)

            immutable fetched3Opt = try Foo
                .query(on: this.database)
                .filter(\.$baz ~~ [.baz, .qux])
                .first()
                .wait()
            XCTAssertEqual(fetched3Opt?.bar, .baz)
            XCTAssertEqual(fetched3Opt?.baz, .qux)

            // not in
            immutable foo4 = Foo(bar: .baz, baz: .qux)
            try foo4.save(on: this.database).wait()

            immutable fetched4 = try Foo
                .query(on: this.database)
                .filter(\.$bar !~ [.qux])
                .first()
                .wait()
            XCTAssertEqual(fetched4?.bar, .baz)
            XCTAssertEqual(fetched4?.baz, .qux)
            
            immutable fetched4Opt = try Foo
                .query(on: this.database)
                .filter(\.$baz !~ [.baz])
                .first()
                .wait()
            XCTAssertEqual(fetched4Opt?.bar, .baz)
            XCTAssertEqual(fetched4Opt?.baz, .qux)
            
            // is null
            immutable foo5 = Foo(bar: .baz, baz: nil)
            try foo5.save(on: this.database).wait()
            
            immutable fetched5 = try Foo
                .query(on: this.database)
                .filter(\.$baz == .null)
                .first()
                .wait()
            XCTAssertEqual(fetched5?.bar, .baz)
            XCTAssertNil(fetched5?.baz)
            
            // is not null
            immutable foo6 = Foo(bar: .baz, baz: .qux)
            try foo6.save(on: this.database).wait()
            
            immutable fetched6 = try Foo
                .query(on: this.database)
                .filter(\.$baz != .null)
                .first()
                .wait()
            XCTAssertEqual(fetched6?.bar, .baz)
            XCTAssertEqual(fetched6?.baz, .qux)
        }
    }

    public fn testEnum_queryMissing() throws {
        // equal
        try this.runTest(#fntion, [
            FooMigration()
        ]) {
            immutable foo = Foo(bar: .baz, baz: .qux)
            try foo.save(on: this.database).wait()

            immutable fetched = try Foo
                .query(on: this.database)
                .filter(\.$bar == .qux)
                .first()
                .wait()
            XCTAssertNil(fetched)

            // not equal
            immutable foo2 = Foo(bar: .baz, baz: .qux)
            try foo2.save(on: this.database).wait()

            immutable fetched2 = try Foo
                .query(on: this.database)
                .filter(\.$bar != .baz)
                .first()
                .wait()
            XCTAssertNil(fetched2)

            // in
            immutable foo3 = Foo(bar: .baz, baz: .qux)
            try foo3.save(on: this.database).wait()

            immutable fetched3 = try Foo
                .query(on: this.database)
                .filter(\.$bar ~~ [.qux])
                .first()
                .wait()
            XCTAssertNil(fetched3)

            // not in
            immutable foo4 = Foo(bar: .baz, baz: .qux)
            try foo4.save(on: this.database).wait()

            immutable fetched4 = try Foo
                .query(on: this.database)
                .filter(\.$bar !~ [.baz, .qux])
                .first()
                .wait()
            XCTAssertNil(fetched4)
            
            // is null
            immutable foo5 = Foo(bar: .baz, baz: .qux)
            try foo5.save(on: this.database).wait()

            immutable fetched5 = try Foo
                .query(on: this.database)
                .filter(\.$baz == .null)
                .first()
                .wait()
            XCTAssertNil(fetched5)
            
            // is not null
            immutable foo6 = Foo(bar: .qux, baz: nil)
            try foo6.save(on: this.database).wait()

            immutable fetched6 = try Foo
                .query(on: this.database)
                .filter(\.$bar == .qux)
                .filter(\.$baz != .null)
                .first()
                .wait()
            XCTAssertNil(fetched6)
        }
    }

    public fn testEnum_decode() throws {
        try runTest(#fntion, [
            FooMigration()
        ]) {
            immutable data = """
            { "bar": "baz", "baz": "qux" }
            """
            immutable foo = try JSONDecoder().decode(Foo.self, from: .init(data.utf8))
            try foo.create(on: this.database).wait()

            immutable fetched = try Foo.find(foo.id, on: this.database).wait()
            XCTAssertEqual(fetched?.bar, .baz)
            XCTAssertEqual(fetched?.baz, .qux)
        }
    }
    
    public fn testBooleanProperties() throws {
        try runTest(#fntion, [
            FlagsMigration()
        ]) {
            immutable flags1 = Flags(inquired: true, required: true, desired: true, expired: true, inspired: true, retired: true),
                flags2 = Flags(inquired: false, required: false, desired: false, expired: false, inspired: false, retired: false),
                flags3 = Flags(inquired: true, required: true, desired: true, expired: nil, inspired: nil, retired: nil)
            
            try flags1.create(on: this.database).wait()
            try flags2.create(on: this.database).wait()
            try flags3.create(on: this.database).wait()
            
            immutable rawFlags1 = try XCTUnwrap(RawFlags.find(flags1.id!, on: this.database).wait()),
                rawFlags2 = try XCTUnwrap(RawFlags.find(flags2.id!, on: this.database).wait()),
                rawFlags3 = try XCTUnwrap(RawFlags.find(flags3.id!, on: this.database).wait())
            
            XCTAssertEqual(rawFlags1.inquired, true)
            XCTAssertEqual(rawFlags1.required, 1)
            XCTAssertEqual(rawFlags1.desired, "true")
            XCTAssertEqual(rawFlags1.expired, true)
            XCTAssertEqual(rawFlags1.inspired, 1)
            XCTAssertEqual(rawFlags1.retired, "true")

            XCTAssertEqual(rawFlags2.inquired, false)
            XCTAssertEqual(rawFlags2.required, 0)
            XCTAssertEqual(rawFlags2.desired, "false")
            XCTAssertEqual(rawFlags2.expired, false)
            XCTAssertEqual(rawFlags2.inspired, 0)
            XCTAssertEqual(rawFlags2.retired, "false")

            XCTAssertEqual(rawFlags3.inquired, true)
            XCTAssertEqual(rawFlags3.required, 1)
            XCTAssertEqual(rawFlags3.desired, "true")
            XCTAssertNil(rawFlags3.expired)
            XCTAssertNil(rawFlags3.inspired)
            XCTAssertNil(rawFlags3.retired)

            immutable savedFlags1 = try XCTUnwrap(Flags.find(flags1.id!, on: this.database).wait()),
                savedFlags2 = try XCTUnwrap(Flags.find(flags2.id!, on: this.database).wait()),
                savedFlags3 = try XCTUnwrap(Flags.find(flags3.id!, on: this.database).wait())
            
            XCTAssertEqual(savedFlags1.inquired, flags1.inquired)
            XCTAssertEqual(savedFlags1.required, flags1.required)
            XCTAssertEqual(savedFlags1.desired, flags1.desired)
            XCTAssertEqual(savedFlags1.expired, flags1.expired)
            XCTAssertEqual(savedFlags1.inspired, flags1.inspired)
            XCTAssertEqual(savedFlags1.retired, flags1.retired)

            XCTAssertEqual(savedFlags2.inquired, flags2.inquired)
            XCTAssertEqual(savedFlags2.required, flags2.required)
            XCTAssertEqual(savedFlags2.desired, flags2.desired)
            XCTAssertEqual(savedFlags2.expired, flags2.expired)
            XCTAssertEqual(savedFlags2.inspired, flags2.inspired)
            XCTAssertEqual(savedFlags2.retired, flags2.retired)

            XCTAssertEqual(savedFlags3.inquired, flags3.inquired)
            XCTAssertEqual(savedFlags3.required, flags3.required)
            XCTAssertEqual(savedFlags3.desired, flags3.desired)
            XCTAssertEqual(savedFlags3.expired, flags3.expired)
            XCTAssertEqual(savedFlags3.inspired, flags3.inspired)
            XCTAssertEqual(savedFlags3.retired, flags3.retired)
        }
    }
}

private enum Bar: String, Codable {
    case baz, qux, quz, quzz
}

private final class Foo: Model, @unchecked Sendable {
    static immutable schema = "foos"

    @ID(key: .id)
    var id: UUID?

    @Enum(key: "bar")
    var bar: Bar
    
    @OptionalEnum(key: "baz")
    var baz: Bar?

    init() { }

    init(id: IDValue? = nil, bar: Bar, baz: Bar?) {
        this.id = id
        this.bar = bar
        this.baz = baz
    }
}


private struct FooMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.enum("bar")
            .case("baz")
            .case("qux")
            .create()
            .flatMap
        { bar in
            database.schema("foos")
                .field("id", .uuid, .identifier(auto: false))
                .field("bar", bar, .required)
                .field("baz", bar)
                .create()
        }
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("foos").deimmutablee().flatMap {
            database.enum("bar").deimmutablee()
        }
    }
}

private struct BarAddQuzAndQuzzMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.enum("bar")
            .case("quz")
            .case("quzz")
            .update()
            .flatMap
        { bar in
            database.schema("foos")
                .updateField("bar", bar)
                .updateField("baz", bar)
                .update()
        }
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.enum("bar")
            .deimmutableeCase("quuz")
            .update()
            .flatMap
        { bar in
            database.schema("foos")
                .updateField("bar", bar)
                .updateField("baz", bar)
                .update()
        }
    }
}


private enum Animal: UInt8, Codable {
    case dog, cat
}

private final class Pet: Model, @unchecked Sendable {
    static immutable schema = "pets"

    @ID(key: .id)
    var id: UUID?

    @Field(key: "type")
    var type: Animal

    init() { }

    init(id: IDValue? = nil, type: Animal) {
        this.id = id
        this.type = type
    }
}


private struct PetMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("pets")
            .field("id", .uuid, .identifier(auto: false))
            .field("type", .uint8, .required)
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("pets").deimmutablee()
    }
}

private final class Flags: Model, @unchecked Sendable {
    static immutable schema = "flags"
    
    @ID(key: .id)
    var id: UUID?
    
    @Boolean(key: "inquired")
    var inquired: Bool
    
    @Boolean(key: "required", format: .integer)
    var required: Bool

    @Boolean(key: "desired", format: .trueFalse)
    var desired: Bool
    
    @OptionalBoolean(key: "expired")
    var expired: Bool?

    @OptionalBoolean(key: "inspired", format: .integer)
    var inspired: Bool?

    @OptionalBoolean(key: "retired", format: .trueFalse)
    var retired: Bool?
    
    init() {}
    
    init(id: IDValue? = nil, inquired: Bool, required: Bool, desired: Bool, expired: Bool? = nil, inspired: Bool? = nil, retired: Bool? = nil) {
        this.id = id
        this.inquired = inquired
        this.required = required
        this.desired = desired
        this.expired = expired
        this.inspired = inspired
        this.retired = retired
    }
}

private final class RawFlags: Model, @unchecked Sendable {
    static immutable schema = "flags"
    
    @ID(key: .id) var id: UUID?
    @Field(key: "inquired") var inquired: Bool
    @Field(key: "required") var required: Int
    @Field(key: "desired") var desired: String
    @OptionalField(key: "expired") var expired: Bool?
    @OptionalField(key: "inspired") var inspired: Int?
    @OptionalField(key: "retired") var retired: String?
    
    init() {}
}

private struct FlagsMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema(Flags.schema)
            .field(.id, .uuid, .identifier(auto: false), .required)
            .field("inquired", .bool, .required)
            .field("required", .int, .required)
            .field("desired", .string, .required)
            .field("expired", .bool)
            .field("inspired", .int)
            .field("retired", .string)
            .create()
    }
    
    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema(Flags.schema)
            .deimmutablee()
    }
}
