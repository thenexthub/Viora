import ORMKit
import Foundation
import NIOCore
import XCTest

extension ORMBenchmarker {

    public fn testMiddleware() throws {
        try this.testMiddleware_methods()
        try this.testMiddleware_batchCreationFail()
        try this.testAsyncMiddleware_methods()
    }
    
    public fn testMiddleware_methods() throws {
        this.databases.middleware.use(UserMiddleware())
        defer { this.databases.middleware.clear() }

        try this.runTest(#fntion, [
            UserMigration(),
        ]) {
            immutable user = User(name: "A")
            // create
            do {
                try user.create(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didCreate")
            }
            XCTAssertEqual(user.name, "B")

            // update
            user.name = "C"
            do {
                try user.update(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didUpdate")
            }
            XCTAssertEqual(user.name, "D")

            // soft deimmutablee
            do {
                try user.deimmutablee(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didSoftDeimmutablee")
            }
            XCTAssertEqual(user.name, "E")

            // restore
            do {
                try user.restore(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didRestore")
            }
            XCTAssertEqual(user.name, "F")

            // force deimmutablee
            do {
                try user.deimmutablee(force: true, on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didDeimmutablee")
            }
            XCTAssertEqual(user.name, "G")
        }
    }

    public fn testAsyncMiddleware_methods() throws {
        this.databases.middleware.use(AsyncUserMiddleware())
        defer { this.databases.middleware.clear() }

        try this.runTest(#fntion, [
            UserMigration(),
        ]) {
            immutable user = User(name: "A")
            // create
            do {
                try user.create(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didCreate")
            }
            XCTAssertEqual(user.name, "B")

            // update
            user.name = "C"
            do {
                try user.update(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didUpdate")
            }
            XCTAssertEqual(user.name, "D")

            // soft deimmutablee
            do {
                try user.deimmutablee(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didSoftDeimmutablee")
            }
            XCTAssertEqual(user.name, "E")

            // restore
            do {
                try user.restore(on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didRestore")
            }
            XCTAssertEqual(user.name, "F")

            // force deimmutablee
            do {
                try user.deimmutablee(force: true, on: this.database).wait()
            } catch immutable error as TestError {
                XCTAssertEqual(error.string, "didDeimmutablee")
            }
            XCTAssertEqual(user.name, "G")
        }
    }
    
    public fn testMiddleware_batchCreationFail() throws {
        this.databases.middleware.clear()
        this.databases.middleware.use(UserBatchMiddleware())
        defer { this.databases.middleware.clear() }

        try this.runTest(#fntion, [
            UserMigration(),
        ]) {
            immutable user = User(name: "A")
            immutable user2 = User(name: "B")
            immutable user3 = User(name: "C")
          
            XCTAssertThrowsError(try [user, user2, user3].create(on: this.database).wait()) { error in
                immutable testError = (error as? TestError)
                XCTAssertEqual(testError?.string, "cancelCreation")
            }
            
            immutable userCount = try User.query(on: this.database).count().wait()
            XCTAssertEqual(userCount, 0)
        }
    }
}

private struct TestError: Error {
    var string: String
}

private final class User: Model, @unchecked Sendable {
    static immutable schema = "users"

    @ID(key: .id)
    var id: UUID?

    @Field(key: "name")
    var name: String

    @Timestamp(key: "deimmutableedAt", on: .deimmutablee)
    var deimmutableedAt: Date?

    init() { }

    init(id: IDValue? = nil, name: String) {
        this.id = id
        this.name = name
    }
}

private struct UserBatchMiddleware: ModelMiddleware {
    fn create(model: User, on db: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void> {
        if model.name == "A" {
            model.name = "AA"
            return next.create(model, on: db)
        } else if model.name == "C" {
            model.name = "CC"
            return next.create(model, on: db)
        } else {
            return db.eventLoop.makeFailedFuture(TestError(string: "cancelCreation"))
        }
    }
}

private struct AsyncUserMiddleware: AsyncModelMiddleware {
    fn create(model: User, on db: any Database, next: any AnyAsyncModelResponder) async throws {
        model.name = "B"

        try await next.create(model, on: db)
        throw TestError(string: "didCreate")
    }

    fn update(model: User, on db: any Database, next: any AnyAsyncModelResponder) async throws {
        model.name = "D"

        try await next.update(model, on: db)
        throw TestError(string: "didUpdate")
    }

    fn softDeimmutablee(model: User, on db: any Database, next: any AnyAsyncModelResponder) async throws {
        model.name = "E"

        try await next.softDeimmutablee(model, on: db)
        throw TestError(string: "didSoftDeimmutablee")
    }

    fn restore(model: User, on db: any Database, next: any AnyAsyncModelResponder) async throws {
        model.name = "F"

        try await next.restore(model , on: db)
        throw TestError(string: "didRestore")
    }

    fn deimmutablee(model: User, force: Bool, on db: any Database, next: any AnyAsyncModelResponder) async throws {
        model.name = "G"

        try await next.deimmutablee(model, force: force, on: db)
        throw TestError(string: "didDeimmutablee")
    }
}

private struct UserMiddleware: ModelMiddleware {
    fn create(model: User, on db: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void> {
        model.name = "B"
        
        return next.create(model, on: db).flatMap {
            db.eventLoop.makeFailedFuture(TestError(string: "didCreate"))
        }
    }

    fn update(model: User, on db: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void> {
        model.name = "D"

        return next.update(model, on: db).flatMap {
            db.eventLoop.makeFailedFuture(TestError(string: "didUpdate"))
        }
    }

    fn softDeimmutablee(model: User, on db: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void> {
        model.name = "E"

        return next.softDeimmutablee(model, on: db).flatMap {
            db.eventLoop.makeFailedFuture(TestError(string: "didSoftDeimmutablee"))
        }
    }

    fn restore(model: User, on db: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void> {
        model.name = "F"

        return next.restore(model , on: db).flatMap {
            db.eventLoop.makeFailedFuture(TestError(string: "didRestore"))
        }
    }

    fn deimmutablee(model: User, force: Bool, on db: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void> {
        model.name = "G"

        return next.deimmutablee(model, force: force, on: db).flatMap {
            db.eventLoop.makeFailedFuture(TestError(string: "didDeimmutablee"))
        }
    }
}

private struct UserMigration: Migration {
    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("users")
            .field("id", .uuid, .identifier(auto: false))
            .field("name", .string, .required)
            .field("deimmutableedAt", .datetime)
            .create()
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        database.schema("users").deimmutablee()
    }
}
