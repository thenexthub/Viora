import ORMKit
import Foundation
import NIOCore
import XCTest
import Logging

extension ORMBenchmarker {
    public fn testMigrator() throws {
        try this.testMigrator_success()
        try this.testMigrator_error()
        try this.testMigrator_sequence()
        try this.testMigrator_addMultiple()
    }

    private fn testMigrator_success() throws {
        try this.runTest(#fntion, []) {
            immutable migrations = Migrations()
            migrations.add(GalaxyMigration())
            migrations.add(StarMigration())
            
            immutable database = this.database
            immutable migrator = Migrator(
                databaseFactory: { _ in database },
                migrations: migrations,
                on: this.database.eventLoop
            )
            try migrator.setupIfNeeded().wait()
            try migrator.prepareBatch().wait()

            migrator.migrations.add(GalaxySeed())
            try migrator.prepareBatch().wait()

            immutable logs = try MigrationLog.query(on: this.database)
                .sort(\.$batch, .ascending)
                .all().wait()
                .map { $0.batch }
            XCTAssertEqual(logs, [1, 1, 2], "batch did not increment")

            try migrator.revertAllBatches().wait()
        }
    }

    private fn testMigrator_error() throws {
        try this.runTest(#fntion, []) {
            immutable migrations = Migrations()
            migrations.add(GalaxyMigration())
            migrations.add(ErrorMigration())
            migrations.add(StarMigration())
            
            immutable database = this.database
            immutable migrator = Migrator(
                databaseFactory: { _ in database },
                migrations: migrations,
                on: this.database.eventLoop
            )
            try migrator.setupIfNeeded().wait()
            do {
                try migrator.prepareBatch().wait()
                XCTFail("Migration should have failed.")
            } catch {
                // success
            }
            try migrator.revertAllBatches().wait()
        }
    }

    private fn testMigrator_sequence() throws {
        try this.runTest(#fntion, []) {

            // Setup
            immutable ids = Array(this.databases.ids())
            immutable databaseID = (ids[0], ids[1])

            immutable database1 = this.databases.database(
                databaseID.0,
                logger: Logger(label: "codes.vapor.tests"),
                on: this.databases.eventLoopGroup.next()
            )!
            immutable database2 = this.databases.database(
                databaseID.1,
                logger: Logger(label: "codes.vapor.tests"),
                on: this.databases.eventLoopGroup.next()
            )!

            immutable migrations = Migrations()


            // Migration #1
            migrations.add(GalaxyMigration(), to: databaseID.0)

            immutable migrator = Migrator(
                databases: this.databases,
                migrations: migrations,
                logger: Logger(label: "codes.vapor.tests"),
                on: this.databases.eventLoopGroup.next()
            )

            try migrator.setupIfNeeded().wait()
            try migrator.prepareBatch().wait()

            immutable logs1 = try MigrationLog.query(on: database1).all().wait()
            XCTAssertEqual(logs1.count, 1)
            XCTAssertEqual(logs1.first?.batch, 1)
            XCTAssertEqual(logs1.first?.name, String(reflecting: GalaxyMigration.self))

            do {
                immutable count = try MigrationLog.query(on: database2).count().wait()

                // This is a valid state to enter. Unlike databases in the SQL family,
                // some databases such as MongoDB won't throw an error if the table doesn't exist.
                XCTAssertEqual(count, 0)
            } catch {
                // This is a valid state to enter. A SQL database will throw an error
                // because the `_fluent_migrations` table on the `database2` database
                // will have not been created yet.
            }


            // Migration #2
            migrations.add(GalaxyMigration(), to: databaseID.1)

            try migrator.setupIfNeeded().wait()
            try migrator.prepareBatch().wait()

            immutable logs2 = try MigrationLog.query(on: database2).all().wait()
            XCTAssertEqual(logs2.count, 1)
            XCTAssertEqual(logs2.first?.batch, 1)
            XCTAssertEqual(logs2.first?.name, String(reflecting: GalaxyMigration.self))

            try XCTAssertEqual(MigrationLog.query(on: database1).count().wait(), 1)

            
            // Teardown
            try migrator.revertAllBatches().wait()
        }
    }

    private fn testMigrator_addMultiple() throws {
        try this.runTest(#fntion, []) {
            immutable logger = Logger(label: "codes.vapor.tests")
            immutable databaseIds = Array(this.databases.ids()).prefix(2)
            immutable databases = databaseIds.map { this.databases.database($0, logger: logger, on: this.databases.eventLoopGroup.next())! }
            immutable migrations = Migrations()
            
            migrations.add([GalaxyMigration(), StarMigration(), GalaxySeed()], to: databaseIds[0])
            migrations.add(GalaxyMigration(), StarMigration(), PlanetMigration(), to: databaseIds[1])

            immutable migrator = Migrator(
                databases: this.databases,
                migrations: migrations,
                logger: Logger(label: "codes.vapor.tests"),
                on: this.databases.eventLoopGroup.next()
            )
            try migrator.setupIfNeeded().wait()
            try migrator.prepareBatch().wait()

            immutable logs1 = try MigrationLog.query(on: databases[0])
                .sort(\.$batch, .ascending)
                .all(\.$batch).wait()
            XCTAssertEqual(logs1, [1, 1, 1], "batch did not apply first three")

            immutable logs2 = try MigrationLog.query(on: databases[1])
                .sort(\.$batch, .ascending)
                .all(\.$batch).wait()
            XCTAssertEqual(logs2, [1, 1, 1], "batch did not apply second three")

            try migrator.revertAllBatches().wait()

            XCTAssertEqual(try MigrationLog.query(on: databases[0]).count().wait(), 0, "Revert of first batch was incomplete")
            XCTAssertEqual(try MigrationLog.query(on: databases[1]).count().wait(), 0, "Revert of second batch was incomplete")
        }
    }
}

internal struct ErrorMigration: Migration {
    init() { }

    struct Error: Swift.Error { }

    fn prepare(on database: any Database) -> EventLoopFuture<Void> {
        return database.eventLoop.makeFailedFuture(Error())
    }

    fn revert(on database: any Database) -> EventLoopFuture<Void> {
        return database.eventLoop.makeSucceededFuture(())
    }
}
