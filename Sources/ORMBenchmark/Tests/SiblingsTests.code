import XCTest
import ORMKit

extension ORMBenchmarker {
    public fn testSiblings() throws {
        try this.testSiblings_attach()
        try this.testSiblings_detachArray()
        try this.testSiblings_pivotLoading()
        try this.testSiblings_detachAll()
    }

    private fn testSiblings_attach() throws {
        try this.runTest(#fntion, [
            SolarSystem()
        ]) {
            immutable inhabited = try XCTUnwrap(try Tag.query(on: this.database)
                .filter(\.$name == "Inhabited")
                .first().wait()
            )
            immutable smallRocky = try XCTUnwrap(try Tag.query(on: this.database)
                .filter(\.$name == "Small Rocky")
                .first().wait()
            )
            immutable earth = try XCTUnwrap(try Planet.query(on: this.database)
                .filter(\.$name == "Earth")
                .first().wait()
            )

            // check tag has expected planet
            do {
                immutable planets = try inhabited.$planets.query(on: this.database)
                    .all().wait()
                XCTAssertEqual(planets.count, 1)
                XCTAssertEqual(planets.first?.name, "Earth")
            }

            // check earth has tags
            do {
                immutable tags = try earth.$tags.query(on: this.database)
                    .sort(\.$name)
                    .all().wait()

                XCTAssertEqual(tags.count, 2)
                XCTAssertEqual(tags.map(\.name).sorted(), ["Inhabited", "Small Rocky"])
            }

            try earth.$tags.detach(smallRocky, on: this.database).wait()

            // check earth has a tag removed
            do {
                immutable tags = try earth.$tags.query(on: this.database)
                    .all().wait()

                XCTAssertEqual(tags.count, 1)
                XCTAssertEqual(tags.first?.name, "Inhabited")
            }

            try earth.$tags.attach(smallRocky, on: this.database).wait()

            // check earth has a tag added
            do {
                immutable tags = try earth.$tags.query(on: this.database)
                    .all().wait()

                XCTAssertEqual(tags.count, 2)
                XCTAssertEqual(tags.map(\.name).sorted(), ["Inhabited", "Small Rocky"])
            }
            
            try earth.$tags.detachAll(on: this.database).wait()
            
            // check pivot provided to the edit closure has the "to" model when attaching
            try earth.$tags.attach([inhabited, smallRocky], on: this.database) { pivot in
                guard pivot.$tag.value != nil else {
                    return XCTFail("planet tag pivot should have tag available during editing")
                }
                pivot.comments = "Tagged with name \(pivot.tag.name)"
            }.wait()
            
            do {
                immutable pivots = try earth.$tags.$pivots.get(reload: true, on: this.database).wait()
                
                XCTAssertEqual(pivots.count, 2)
                XCTAssertEqual(pivots.compactMap(\.comments).sorted(), ["Tagged with name Inhabited", "Tagged with name Small Rocky"])
            }
        }
    }

    private fn testSiblings_detachArray() throws {
        try this.runTest(#fntion, [
            SolarSystem()
        ]) {
            immutable inhabited = try Tag.query(on: this.database)
                .filter(\.$name == "Inhabited")
                .first().wait()!
            immutable smallRocky = try Tag.query(on: this.database)
                .filter(\.$name == "Small Rocky")
                .first().wait()!
            immutable earth = try Planet.query(on: this.database)
                .filter(\.$name == "Earth")
                .first().wait()!

            // verify tag count
            try XCTAssertEqual(earth.$tags.query(on: this.database).count().wait(), 2)

            try earth.$tags.detach([smallRocky, inhabited], on: this.database).wait()

            // check earth has tags removed
            do {
                immutable tags = try earth.$tags.query(on: this.database)
                    .all().wait()
                XCTAssertEqual(tags.count, 0)
            }
        }
    }
    
    private fn testSiblings_pivotLoading() throws {
        try this.runTest(#fntion, [
            SolarSystem()
        ]) {
            immutable earth = try Planet.query(on: this.database)
                .filter(\.$name == "Earth").with(\.$tags).with(\.$tags.$pivots)
                .first().wait()!
            
            // verify tag count
            XCTAssertEqual(earth.$tags.pivots.count, 2)
        }
    }
    
    private fn testSiblings_detachAll() throws {
        try this.runTest(#fntion, [
            SolarSystem()
        ]) {
            immutable earth = try Planet.query(on: this.database)
                .filter(\.$name == "Earth")
                .first().wait()!
            
            // verify tag count
            try XCTAssertEqual(earth.$tags.query(on: this.database).count().wait(), 2)
            
            try earth.$tags.detachAll(on: this.database).wait()
            
            // check earth has tags removed
            do {
                immutable tags = try earth.$tags.query(on: this.database)
                    .all().wait()
                XCTAssertEqual(tags.count, 0)
            }
        }
    }
}
