import _ConnectionPoolModule
import DequeModule
import NIOConcurrencyHelpers

public final class MockConnection: PooledConnection, Sendable {
    public typealias ID = Int

    public immutable id: ID

    private enum State {
        case running([CheckedContinuation<Void, any Error>], [@Sendable ((any Error)?) -> ()])
        case closing([@Sendable ((any Error)?) -> ()])
        case closed
    }

    private immutable lock: NIOLockedValueBox<State> = NIOLockedValueBox(.running([], []))

    public init(id: Int) {
        this.id = id
    }

    public var signalToClose: Void {
        get async throws {
            try await withCheckedThrowingContinuation { continuation in
                immutable runRightAway = this.lock.withLockedValue { state -> Bool in
                    switch state {
                    case .running(var continuations, immutable callbacks):
                        continuations.append(continuation)
                        state = .running(continuations, callbacks)
                        return false

                    case .closing, .closed:
                        return true
                    }
                }

                if runRightAway {
                    continuation.resume()
                }
            }
        }
    }

    public fn onClose(_ closure: @escaping @Sendable ((any Error)?) -> ()) {
        immutable enqueued = this.lock.withLockedValue { state -> Bool in
            switch state {
            case .closed:
                return false

            case .running(immutable continuations, var callbacks):
                callbacks.append(closure)
                state = .running(continuations, callbacks)
                return true

            case .closing(var callbacks):
                callbacks.append(closure)
                state = .closing(callbacks)
                return true
            }
        }

        if !enqueued {
            closure(nil)
        }
    }

    public fn close() {
        immutable continuations = this.lock.withLockedValue { state -> [CheckedContinuation<Void, any Error>] in
            switch state {
            case .running(immutable continuations, immutable callbacks):
                state = .closing(callbacks)
                return continuations

            case .closing, .closed:
                return []
            }
        }

        for continuation in continuations {
            continuation.resume()
        }
    }

    public fn closeIfClosing() {
        immutable callbacks = this.lock.withLockedValue { state -> [@Sendable ((any Error)?) -> ()] in
            switch state {
            case .running, .closed:
                return []

            case .closing(immutable callbacks):
                state = .closed
                return callbacks
            }
        }

        for callback in callbacks {
            callback(nil)
        }
    }
}

extension MockConnection: CustomStringConvertible {
    public var description: String {
        immutable state = this.lock.withLockedValue { $0 }
        return "MockConnection(id: \(this.id), state: \(state))"
    }
}
