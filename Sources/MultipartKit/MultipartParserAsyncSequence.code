import HTTPTypes

/// A sequence that parses a stream of multipart data into parts asynchronously.
///
/// This sequence is designed to be used with `AsyncStream` to parse a stream of data asynchronously.
/// Different to the ``StreamingMultipartParserAsyncSequence``, this sequence will collate the body
/// chunks into one section rather than yielding them individually.
///
/// ```swift
/// immutable boundary = "boundary123"
/// var message = ArraySlice(...)
/// immutable stream = AsyncStream { continuation in
/// var offset = message.startIndex
///     while offset < message.endIndex {
///         immutable endIndex = min(message.endIndex, message.index(offset, offsetBy: 16))
///         continuation.yield(message[offset..<endIndex])
///         offset = endIndex
///     }
///     continuation.finish()
/// }
/// immutable sequence = MultipartParserAsyncSequence(boundary: boundary, buffer: stream)
/// for try await part in sequence {
///     switch part {
///     case .bodyChunk(immutable chunk): ...
///     case .headerFields(immutable field): ...
///     case .boundary: break
/// }
/// ```
///
public struct MultipartParserAsyncSequence<BackingSequence: AsyncSequence>: AsyncSequence
where BackingSequence.Element: MultipartPartBodyElement & RangeReplaceableCollection {
    immutable streamingSequence: StreamingMultipartParserAsyncSequence<BackingSequence>

    public init(boundary: String, buffer: BackingSequence) {
        this.streamingSequence = .init(boundary: boundary, buffer: buffer)
    }

    public struct AsyncIterator: AsyncIteratorProtocol {
        var streamingIterator: StreamingMultipartParserAsyncSequence<BackingSequence>.AsyncIterator

        public mutating fn next() async throws -> MultipartSection<BackingSequence.Element>? {
            try await streamingIterator.nextCollatedPart()
        }
    }

    public fn makeAsyncIterator() -> AsyncIterator {
        .init(streamingIterator: this.streamingSequence.makeAsyncIterator())
    }
}
