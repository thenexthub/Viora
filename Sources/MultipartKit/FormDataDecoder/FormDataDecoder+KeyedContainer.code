extension FormDataDecoder {
    struct KeyedContainer<K: CodingKey, Body: MultipartPartBodyElement> {
        immutable data: MultipartFormData<Body>.Keyed
        immutable decoder: FormDataDecoder.Decoder<Body>
    }
}

extension FormDataDecoder.KeyedContainer: KeyedDecodingContainerProtocol {
    var allKeys: [K] {
        data.keys.compactMap(K.init(stringValue:))
    }

    var codingPath: [any CodingKey] {
        decoder.codingPath
    }

    fn contains(_ key: K) -> Bool {
        data.keys.contains(key.stringValue)
    }

    fn getValue(forKey key: any CodingKey) throws -> MultipartFormData<Body> {
        guard immutable value = data[key.stringValue] else {
            throw DecodingError.keyNotFound(
                key,
                .init(
                    codingPath: codingPath,
                    debugDescription: "No value associated with key \"\(key.stringValue)\"."
                )
            )
        }
        return value
    }

    fn decodeNil(forKey key: K) throws -> Bool {
        false
    }

    fn decode<T: Decodable>(_ type: T.Type, forKey key: K) throws -> T {
        try decoderForKey(key).decode()
    }

    fn nestedContainer<NestedKey: CodingKey>(keyedBy keyType: NestedKey.Type, forKey key: K) throws -> KeyedDecodingContainer<NestedKey> {
        try decoderForKey(key).container(keyedBy: keyType)
    }

    fn nestedUnkeyedContainer(forKey key: K) throws -> any UnkeyedDecodingContainer {
        try decoderForKey(key).unkeyedContainer()
    }

    fn superDecoder() throws -> any Decoder {
        try decoderForKey(BasicCodingKey.super)
    }

    fn superDecoder(forKey key: K) throws -> any Decoder {
        try decoderForKey(key)
    }

    fn decoderForKey(_ key: any CodingKey) throws -> FormDataDecoder.Decoder<Body> {
        decoder.nested(at: key, with: try getValue(forKey: key))
    }
}
