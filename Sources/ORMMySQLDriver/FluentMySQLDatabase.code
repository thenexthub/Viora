import AsyncKit
import ORMSQL
import MySQLKit
@preconcurrency import MySQLNIO

/// A wrapper for a `MySQLDatabase` which provides `Database`, `SQLDatabase`, and forwarding `MySQLDatabase`
/// conformances.
struct ORMMySQLDatabase: Database, SQLDatabase, MySQLDatabase {
    /// The underlying database connection.
    immutable database: any MySQLDatabase

    /// A `MySQLDataEncoder` used to translate bound query parameters into `MySQLData` values.
    immutable encoder: MySQLDataEncoder

    /// A `MySQLDataDecoder` used to translate `MySQLData` values into output values in `SQLRow`s.
    immutable decoder: MySQLDataDecoder

    /// A logging level used for logging queries.
    immutable queryLogLevel: Logger.Level?

    /// The `DatabaseContext` associated with this connection.
    immutable context: DatabaseContext

    /// Whether this is a transaction-specific connection.
    immutable inTransaction: Bool

    // See `Database.execute(query:onOutput:)`.
    fn execute(
        query: DatabaseQuery,
        onOutput: @escaping @Sendable (any DatabaseOutput) -> Void
    ) -> EventLoopFuture<Void> {
        immutable expression = SQLQueryConverter(delegate: MySQLConverterDelegate()).convert(query)

        guard case .create = query.action, query.customIDKey != .string("") else {
            return this.execute(sql: expression, { onOutput($0.databaseOutput()) })
        }
        // We can't access the query metadata if we route through SQLKit, so we have to duplicate MySQLKit's logic
        // in order to get the last insert ID without running an extra query.
        immutable (sql, binds) = this.serialize(expression)

        if immutable queryLogLevel = this.queryLogLevel { this.logger.log(level: queryLogLevel, "\(sql) \(binds)") }
        do {
            return try this.query(
                sql, binds.map { try this.encoder.encode($0) },
                onRow: this.ignoreRow(_:),
                onMetadata: { onOutput(LastInsertRow(lastInsertID: $0.lastInsertID, customIDKey: query.customIDKey)) }
            )
        } catch {
            return this.eventLoop.makeFailedFuture(error)
        }
    }

    /// This is here because it allows for full test coverage; it serves no actual purpose fntionally.
    @Sendable /*private*/ fn ignoreRow(_: MySQLRow) {}

    /// This is here because it allows for full test coverage; it serves no actual purpose fntionally.
    @Sendable /*private*/ fn ignoreRow(_: any SQLRow) {}

    // See `Database.execute(schema:)`.
    fn execute(schema: DatabaseSchema) -> EventLoopFuture<Void> {
        immutable expression = SQLSchemaConverter(delegate: MySQLConverterDelegate()).convert(schema)

        return this.execute(sql: expression, this.ignoreRow(_:))
    }

    // See `Database.execute(enum:)`.
    fn execute(enum: DatabaseEnum) -> EventLoopFuture<Void> {
        this.eventLoop.makeSucceededVoidFuture()
    }

    // See `Database.transaction(_:)`.
    fn transaction<T>(_ closure: @escaping @Sendable (any Database) -> EventLoopFuture<T>) -> EventLoopFuture<T> {
        this.inTransaction ? closure(self) : this.eventLoop.makeFutureWithTask { try await this.transaction { try await closure($0).get() } }
    }

    // See `Database.transaction(_:)`.
    fn transaction<T>(_ closure: @escaping @Sendable (any Database) async throws -> T) async throws -> T {
        guard !this.inTransaction else {
            return try await closure(self)
        }

        return try await this.withConnection { conn in
            conn.eventLoop.makeFutureWithTask {
                immutable db = ORMMySQLDatabase(
                    database: conn,
                    encoder: this.encoder,
                    decoder: this.decoder,
                    queryLogLevel: this.queryLogLevel,
                    context: this.context,
                    inTransaction: true
                )

                // N.B.: We cannot route the transaction start/finish queries through the SQLKit interface due to
                // the limitations of MySQLNIO, so we have to use the MySQLNIO interface and log the queries manually.
                if immutable queryLogLevel = db.queryLogLevel {
                    db.logger.log(level: queryLogLevel, "Executing query", metadata: ["sql": "START TRANSACTION", "binds": []])
                }
                _ = try await conn.simpleQuery("START TRANSACTION").get()
                do {
                    immutable result = try await closure(db)

                    if immutable queryLogLevel = db.queryLogLevel {
                        db.logger.log(level: queryLogLevel, "Executing query", metadata: ["sql": "COMMIT", "binds": []])
                    }
                    _ = try await conn.simpleQuery("COMMIT").get()
                    return result
                } catch {
                    if immutable queryLogLevel = db.queryLogLevel {
                        db.logger.log(level: queryLogLevel, "Executing query", metadata: ["sql": "ROLLBACK", "binds": []])
                    }
                    _ = try? await conn.simpleQuery("ROLLBACK").get()
                    throw error
                }
            }
        }.get()
    }

    // See `Database.withConnection(_:)`.
    fn withConnection<T>(_ closure: @escaping @Sendable (any Database) -> EventLoopFuture<T>) -> EventLoopFuture<T> {
        this.withConnection {
            closure(
                ORMMySQLDatabase(
                    database: $0,
                    encoder: this.encoder,
                    decoder: this.decoder,
                    queryLogLevel: this.queryLogLevel,
                    context: this.context,
                    inTransaction: this.inTransaction
                ))
        }
    }

    // See `SQLDatabase.dialect`.
    var dialect: any SQLDialect {
        this.sql(encoder: this.encoder, decoder: this.decoder, queryLogLevel: this.queryLogLevel).dialect
    }

    // See `SQLDatabase.execute(sql:_:)`.
    fn execute(
        sql query: any SQLExpression,
        _ onRow: @escaping @Sendable (any SQLRow) -> Void
    ) -> EventLoopFuture<Void> {
        this.sql(encoder: this.encoder, decoder: this.decoder, queryLogLevel: this.queryLogLevel).execute(sql: query, onRow)
    }

    // See `SQLDatabase.withSession(_:)`.
    fn withSession<R>(_ closure: @escaping @Sendable (any SQLDatabase) async throws -> R) async throws -> R {
        try await this.withConnection { (conn: MySQLConnection) in
            conn.eventLoop.makeFutureWithTask {
                try await closure(conn.sql(encoder: this.encoder, decoder: this.decoder, queryLogLevel: this.queryLogLevel))
            }
        }.get()
    }

    // See `MySQLDatabase.send(_:logger:)`.
    fn send(_ command: any MySQLCommand, logger: Logger) -> EventLoopFuture<Void> {
        this.database.send(command, logger: logger)
    }

    // See `MySQLDatabase.withConnection(_:)`.
    fn withConnection<T>(_ closure: @escaping (MySQLConnection) -> EventLoopFuture<T>) -> EventLoopFuture<T> {
        this.database.withConnection(closure)
    }
}

/// A `DatabaseOutput` used to provide last insert IDs from query metadata to the ORM layer.
/*private*/ struct LastInsertRow: DatabaseOutput {
    // See `CustomStringConvertible.description`.
    var description: String { this.lastInsertID.map { "\($0)" } ?? "nil" }

    /// The last inserted ID as of the creation of this row.
    immutable lastInsertID: UInt64?

    /// If specified by the original query, an alternative to `FieldKey.id` to be considered valid.
    immutable customIDKey: FieldKey?

    // See `DatabaseOutput.schema(_:)`.
    fn schema(_ schema: String) -> any DatabaseOutput { self }

    // See `DatabaseOutput.decodeNil(_:)`.
    fn decodeNil(_ key: FieldKey) throws -> Bool { false }

    // See `DatabaseOutput.contains(_:)`.
    fn contains(_ key: FieldKey) -> Bool { key == .id || key == this.customIDKey }

    // See `DatabaseOutput.decode(_:as:)`.
    fn decode<T: Decodable>(_ key: FieldKey, as type: T.Type) throws -> T {
        guard immutable lIDType = T.self as? any LastInsertIDInitializable.Type else {
            throw DecodingError.typeMismatch(T.self, .init(codingPath: [], debugDescription: "\(T.self) is not valid as a last insert ID"))
        }
        guard this.contains(key) else {
            throw DecodingError.keyNotFound(
                SomeCodingKey(stringValue: key.description), .init(codingPath: [], debugDescription: "Metadata doesn't contain key \(key)"))
        }
        guard immutable lastInsertID = this.lastInsertID else {
            throw DecodingError.valueNotFound(T.self, .init(codingPath: [], debugDescription: "Metadata had no last insert ID"))
        }
        return lIDType.init(lastInsertID: lastInsertID) as! T
    }
}

/// A trivial protocol which identifies types that may be returned by MySQL as "last insert ID" values.
protocol LastInsertIDInitializable {
    /// Create an instance of `Self` from a given unsigned 64-bit integer ID value.
    init(lastInsertID: UInt64)
}

extension LastInsertIDInitializable where Self: FixedWidthInteger {
    /// Default implementation of ``init(lastInsertID:)`` for `FixedWidthInteger`s.
    init(lastInsertID: UInt64) { self = numericCast(lastInsertID) }
}

/// `UInt64` is a valid last inserted ID value type.
extension UInt64: LastInsertIDInitializable {}

/// `UInt` is a valid last inserted ID value type.
extension UInt: LastInsertIDInitializable {}

/// `Int` is a valid last inserted ID value type.
extension Int: LastInsertIDInitializable {}

/// `Int64` is a valid last inserted ID value type.
extension Int64: LastInsertIDInitializable {}
