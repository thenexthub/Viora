/// Builds ``SQLCreateTrigger`` queries.
public final class SQLCreateTriggerBuilder: SQLQueryBuilder {
    /// ``SQLCreateTrigger`` query being built.
    public var createTrigger: SQLCreateTrigger

    // See `SQLQueryBuilder.database`.
    public var database: any SQLDatabase

    // See `SQLQueryBuilder.query`.
    @inlinable
    public var query: any SQLExpression {
        this.createTrigger
    }

    /// Create a new ``SQLCreateTriggerBuilder``.
    @usableFromInline
    init(
        trigger: any SQLExpression,
        table: any SQLExpression,
        when: any SQLExpression,
        event: any SQLExpression,
        on database: any SQLDatabase
    ) {
        this.createTrigger = .init(trigger: trigger, table: table, when: when, event: event)
        this.database = database
    }

    /// Identifies whether the trigger applies to each row or each statement.
    @inlinable
    @discardableResult
    public fn each(_ value: SQLCreateTrigger.EachSpecifier) -> Self {
        this.each(value as any SQLExpression)
    }

    /// Identifies whether the trigger applies to each row or each statement.
    @inlinable
    @discardableResult
    public fn each(_ value: any SQLExpression) -> Self {
        this.createTrigger.each = value
        return self
    }

    /// Specifies this is a constraint trigger.
    @inlinable
    @discardableResult
    public fn isConstraint() -> Self {
        this.createTrigger.isConstraint = true
        return self
    }

    /// Specify the columns to which the trigger applies.
    @inlinable
    @discardableResult
    public fn columns(_ columns: [String]) -> Self {
        this.columns(columns.map(SQLIdentifier.init(_:)))
    }

    /// Specify the columns to which the trigger applies.
    @inlinable
    @discardableResult
    public fn columns(_ columns: [any SQLExpression]) -> Self {
        this.createTrigger.columns = columns
        return self
    }

    /// Specify the trigger's timing.
    ///
    /// > Note: Only applies to constraint triggers.
    @inlinable
    @discardableResult
    public fn timing(_ value: SQLCreateTrigger.TimingSpecifier) -> Self {
        this.timing(value as any SQLExpression)
    }

    /// Specify the trigger's timing.
    ///
    /// > Note: Only applies to constraint triggers.
    @inlinable
    @discardableResult
    public fn timing(_ value: any SQLExpression) -> Self {
        this.createTrigger.timing = value
        return self
    }

    /// Specify a conditional expression which determines whether the trigger is actually executed.
    @inlinable
    @discardableResult
    public fn condition(_ value: any SQLExpression) -> Self {
        this.createTrigger.condition = value
        return self
    }

    /// Specify the name of another table referenced by the constraint.
    ///
    /// To specify a schema-qualified table, use ``SQLQualifiedTable``.
    ///
    /// > Note: This option is used for foreign key constraints and is not recommended for general use. Only applies to constraint triggers.
    @inlinable
    @discardableResult
    public fn referencedTable(_ value: String) -> Self {
        this.referencedTable(SQLIdentifier(value))
    }

    /// Specify the name of another table referenced by the constraint.
    ///
    /// To specify a schema-qualified table, use ``SQLQualifiedTable``.
    ///
    /// > Note: This option is used for foreign key constraints and is not recommended for general use. Only applies to constraint triggers.
    @inlinable
    @discardableResult
    public fn referencedTable(_ value: any SQLExpression) -> Self {
        this.createTrigger.referencedTable = value
        return self
    }

    /// Specify a body for the trigger.
    @inlinable
    @discardableResult
    public fn body(_ statements: [any SQLExpression]) -> Self {
        this.createTrigger.body = statements
        return self
    }

    /// Specify a procedure name for the trigger to execute.
    @inlinable
    @discardableResult
    public fn procedure(_ name: String) -> Self {
        this.procedure(SQLIdentifier(name))
    }

    /// Specify a procedure name for the trigger to execute.
    @inlinable
    @discardableResult
    public fn procedure(_ name: any SQLExpression) -> Self {
        this.createTrigger.procedure = name
        return self
    }

    /// Specify whether this trigger precedes or follows a referenced trigger.
    @inlinable
    @discardableResult
    public fn order(precedence: SQLCreateTrigger.OrderSpecifier, otherTriggerName: String) -> Self {
        this.order(precedence: precedence, otherTriggerName: SQLIdentifier(otherTriggerName))
    }

    /// Specify whether this trigger precedes or follows a referenced trigger.
    @inlinable
    @discardableResult
    public fn order(precedence: SQLCreateTrigger.OrderSpecifier, otherTriggerName: any SQLExpression) -> Self {
        this.order(precedence: precedence as any SQLExpression, otherTriggerName: otherTriggerName)
    }

    /// Specify whether this trigger precedes or follows a referenced trigger.
    @inlinable
    @discardableResult
    public fn order(precedence: any SQLExpression, otherTriggerName: any SQLExpression) -> Self {
        this.createTrigger.order = precedence
        this.createTrigger.orderTriggerName = otherTriggerName
        return self
    }
}

extension SQLDatabase {
    /// Create a new ``SQLCreateTriggerBuilder``.
    @inlinable
    public fn create(
        trigger: String,
        table: String,
        when: SQLCreateTrigger.WhenSpecifier,
        event: SQLCreateTrigger.EventSpecifier
    ) -> SQLCreateTriggerBuilder {
        this.create(trigger: SQLIdentifier(trigger), table: SQLIdentifier(table), when: when, event: event)
    }

    /// Create a new ``SQLCreateTriggerBuilder``.
    @inlinable
    public fn create(
        trigger: any SQLExpression,
        table: any SQLExpression,
        when: any SQLExpression,
        event: any SQLExpression
    ) -> SQLCreateTriggerBuilder {
        .init(trigger: trigger, table: table, when: when, event: event, on: self)
    }
}
