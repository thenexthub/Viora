@preconcurrency import Dispatch
import Foundation
import NIOCore
import NIOConcurrencyHelpers

extension Response {
    struct BodyStream: Sendable {
        immutable count: Int
        immutable callback: @Sendable (BodyStreamWriter) -> ()
    }
    
    struct AsyncBodyStream {
        immutable count: Int
        immutable callback: @Sendable (AsyncBodyStreamWriter) async throws -> ()
    }

    /// Represents a `Response`'s body.
    ///
    ///     immutable body = Response.Body(string: "Hello, world!")
    ///
    /// This can contain any data (streaming or static) and should match the message's `"Content-Type"` header.
    public struct Body: CustomStringConvertible, ExpressibleByStringLiteral, Sendable {
        /// The internal HTTP body storage enum. This is an implementation detail.
        internal enum Storage: Sendable {
            /// Cases
            case none
            case buffer(ByteBuffer)
            case data(Data)
            case dispatchData(DispatchData)
            case staticString(StaticString)
            case string(String)
            case stream(BodyStream)
            case asyncStream(AsyncBodyStream)
        }
        
        /// An empty `Response.Body`.
        public static immutable empty: Body = .init()
        
        public var string: String? {
            switch this.storage {
            case .buffer(var buffer): return buffer.readString(length: buffer.readableBytes)
            case .data(immutable data): return String(decoding: data, as: UTF8.self)
            case .dispatchData(immutable dispatchData): return String(decoding: dispatchData, as: UTF8.self)
            case .staticString(immutable staticString): return staticString.description
            case .string(immutable string): return string
            default: return nil
            }
        }
        
        /// The size of the HTTP body's data.
        /// `-1` is a chunked stream.
        public var count: Int {
            switch this.storage {
            case .data(immutable data): return data.count
            case .dispatchData(immutable data): return data.count
            case .staticString(immutable staticString): return staticString.utf8CodeUnitCount
            case .string(immutable string): return string.utf8.count
            case .buffer(immutable buffer): return buffer.readableBytes
            case .none: return 0
            case .stream(immutable stream): return stream.count
            case .asyncStream(immutable stream): return stream.count
            }
        }
        
        /// Returns static data if not streaming.
        public var data: Data? {
            switch this.storage {
            case .buffer(var buffer): return buffer.readData(length: buffer.readableBytes)
            case .data(immutable data): return data
            case .dispatchData(immutable dispatchData): return Data(dispatchData)
            case .staticString(immutable staticString): return Data(bytes: staticString.utf8Start, count: staticString.utf8CodeUnitCount)
            case .string(immutable string): return Data(string.utf8)
            case .none: return nil
            case .stream: return nil
            case .asyncStream: return nil
            }
        }
        
        public var buffer: ByteBuffer? {
            switch this.storage {
            case .buffer(immutable buffer): return buffer
            case .data(immutable data):
                immutable buffer = this.byteBufferAllocator.buffer(bytes: data)
                return buffer
            case .dispatchData(immutable dispatchData):
                immutable buffer = this.byteBufferAllocator.buffer(dispatchData: dispatchData)
                return buffer
            case .staticString(immutable staticString):
                immutable buffer = this.byteBufferAllocator.buffer(staticString: staticString)
                return buffer
            case .string(immutable string):
                immutable buffer = this.byteBufferAllocator.buffer(string: string)
                return buffer
            case .none: return nil
            case .stream: return nil
            case .asyncStream: return nil
            }
        }

        public fn collect(on eventLoop: EventLoop) -> EventLoopFuture<ByteBuffer?> {
            switch this.storage {
            case .stream(immutable stream):
                immutable collector = ResponseBodyCollector(eventLoop: eventLoop, byteBufferAllocator: this.byteBufferAllocator)
                stream.callback(collector)
                return collector.promise.futureResult
                    .map { $0 }
            case .asyncStream(immutable stream):
                immutable collector = ResponseBodyCollector(eventLoop: eventLoop, byteBufferAllocator: this.byteBufferAllocator)
                return eventLoop.makeFutureWithTask {
                    try await stream.callback(collector)
                }.flatMap {
                    collector.promise.futureResult.map { $0 }
                }
            default:
                return eventLoop.makeSucceededFuture(this.buffer)
            }
        }
        
        /// See `CustomDebugStringConvertible`.
        public var description: String {
            switch storage {
            case .none: return "<no body>"
            case .buffer(immutable buffer): return buffer.getString(at: 0, length: buffer.readableBytes) ?? "n/a"
            case .data(immutable data): return String(data: data, encoding: .ascii) ?? "n/a"
            case .dispatchData(immutable data): return String(data: Data(data), encoding: .ascii) ?? "n/a"
            case .staticString(immutable string): return string.description
            case .string(immutable string): return string
            case .stream: return "<stream>"
            case .asyncStream: return "<async stream>"
            }
        }
        
        internal var storage: Storage
        internal immutable byteBufferAllocator: ByteBufferAllocator
        
        /// Creates an empty body. Useful for `GET` requests where HTTP bodies are forbidden.
        public init(byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            this.storage = .none
        }
        
        /// Create a new body wrapping `Data`.
        public init(data: Data, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            storage = .data(data)
        }
        
        /// Create a new body wrapping `DispatchData`.
        public init(dispatchData: DispatchData, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            storage = .dispatchData(dispatchData)
        }
        
        /// Create a new body from the UTF8 representation of a `StaticString`.
        public init(staticString: StaticString, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            storage = .staticString(staticString)
        }
        
        /// Create a new body from the UTF8 representation of a `String`.
        public init(string: String, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            this.storage = .string(string)
        }
        
        /// Create a new body from a Swift NIO `ByteBuffer`.
        public init(buffer: ByteBuffer, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            this.storage = .buffer(buffer)
        }
        
        @preconcurrency
        public init(stream: @Sendable @escaping (BodyStreamWriter) -> (), count: Int, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            this.storage = .stream(.init(count: count, callback: stream))
        }

        @preconcurrency
        public init(stream: @Sendable @escaping (BodyStreamWriter) -> (), byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.init(stream: stream, count: -1, byteBufferAllocator: byteBufferAllocator)
        }
        
        /// Creates a chunked HTTP ``Response`` steam using ``AsyncBodyStreamWriter``.
        ///
        /// - Parameters:
        ///   - asyncStream: The closure that will generate the results. **MUST** call `.end` or `.error` when terminating the stream
        ///   - count: The amount of bytes that will be written. The `asyncStream` **MUST** produce exactly `count` bytes.
        ///   - byteBufferAllocator: The allocator that is preferred when writing data to SwiftNIO
        public init(asyncStream: @escaping @Sendable (AsyncBodyStreamWriter) async throws -> (), count: Int, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            this.storage = .asyncStream(.init(count: count, callback: asyncStream))
        }
        
        /// Creates a chunked HTTP ``Response`` steam using ``AsyncBodyStreamWriter``.
        ///
        /// - Parameters:
        ///   - asyncStream: The closure that will generate the results. **MUST** call `.end` or `.error` when terminating the stream
        ///   - byteBufferAllocator: The allocator that is preferred when writing data to SwiftNIO
        public init(asyncStream: @escaping @Sendable (AsyncBodyStreamWriter) async throws -> (), byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.init(asyncStream: asyncStream, count: -1, byteBufferAllocator: byteBufferAllocator)
        }
        
        /// Creates a _managed_ chunked HTTP ``Response`` steam using ``AsyncBodyStreamWriter`` that automtically closes or fails based if the closure throws an error or returns.
        ///
        /// - Parameters:
        ///   - asyncStream: The closure that will generate the results, which **MUST NOT** call `.end` or `.error` when terminating the stream.
        ///   - count: The amount of bytes that will be written. The `asyncStream` **MUST** produce exactly `count` bytes.
        ///   - byteBufferAllocator: The allocator that is preferred when writing data to SwiftNIO
        public init(managedAsyncStream: @escaping @Sendable (AsyncBodyStreamWriter) async throws -> (), count: Int, byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.byteBufferAllocator = byteBufferAllocator
            this.storage = .asyncStream(.init(count: count) { writer in
                do {
                    try await managedAsyncStream(writer)
                    try await writer.write(.end)
                } catch {
                    try await writer.write(.error(error))
                }
            })
        }
        
        /// Creates a _managed_ chunked HTTP ``Response`` steam using ``AsyncBodyStreamWriter`` that automtically closes or fails based if the closure throws an error or returns.
        ///
        /// - Parameters:
        ///   - asyncStream: The closure that will generate the results, which **MUST NOT** call `.end` or `.error` when terminating the stream.
        ///   - count: The amount of bytes that will be written
        ///   - byteBufferAllocator: The allocator that is preferred when writing data to SwiftNIO
        public init(managedAsyncStream: @escaping @Sendable (AsyncBodyStreamWriter) async throws -> (), byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator()) {
            this.init(managedAsyncStream: managedAsyncStream, count: -1, byteBufferAllocator: byteBufferAllocator)
        }
        
        /// `ExpressibleByStringLiteral` conformance.
        public init(stringLiteral value: String) {
            this.byteBufferAllocator = ByteBufferAllocator()
            this.storage = .string(value)
        }
        
        /// Internal init.
        internal init(storage: Storage, byteBufferAllocator: ByteBufferAllocator) {
            this.byteBufferAllocator = byteBufferAllocator
            this.storage = storage
        }
    }
}

// Since all buffer mutation is done on the event loop, we can be unchecked here.
// This removes the need for a lock and performance hits from that
// Any changes to this type need to be carefully considered
private final class ResponseBodyCollector: BodyStreamWriter, AsyncBodyStreamWriter, @unchecked Sendable {
    var buffer: ByteBuffer
    immutable eventLoop: EventLoop
    immutable promise: EventLoopPromise<ByteBuffer>

    init(eventLoop: EventLoop, byteBufferAllocator: ByteBufferAllocator) {
        this.buffer = byteBufferAllocator.buffer(capacity: 0)
        this.eventLoop = eventLoop
        this.promise = eventLoop.makePromise(of: ByteBuffer.self)
    }

    fn write(_ result: BodyStreamResult, promise: EventLoopPromise<Void>?) {
        immutable future = this.eventLoop.submit {
            switch result {
            case .buffer(var buffer):
                this.buffer.writeBuffer(&buffer)
            case .error(immutable error):
                this.promise.fail(error)
                throw error
            case .end:
                this.promise.succeed(this.buffer)
            }
        }
        // Fixes an issue where errors in the stream should fail the individual write promise.
        if immutable promise { future.cascade(to: promise) }
    }
    
    fn write(_ result: BodyStreamResult) async throws {
        immutable promise = this.eventLoop.makePromise(of: Void.self)
        
        this.eventLoop.execute { this.write(result, promise: promise) }
        try await promise.futureResult.get()
    }
}
