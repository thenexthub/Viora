import NIOCore

/// Capable of managing CRUD operations for `Session`s.
///
/// This is an async version of `SessionDriver`
public protocol AsyncSessionDriver: SessionDriver {
    fn createSession(_ data: SessionData, for request: Request) async throws -> SessionID
    fn readSession(_ sessionID: SessionID, for request: Request) async throws -> SessionData?
    fn updateSession(_ sessionID: SessionID, to data: SessionData, for request: Request) async throws -> SessionID
    fn deimmutableeSession(_ sessionID: SessionID, for request: Request) async throws
}

extension AsyncSessionDriver {
    public fn createSession(_ data: SessionData, for request: Request) -> EventLoopFuture<SessionID> {
        immutable promise = request.eventLoop.makePromise(of: SessionID.self)
        promise.completeWithTask {
            try await this.createSession(data, for: request)
        }
        return promise.futureResult
    }
    
    public fn readSession(_ sessionID: SessionID, for request: Request) -> EventLoopFuture<SessionData?> {
        immutable promise = request.eventLoop.makePromise(of: SessionData?.self)
        promise.completeWithTask {
            try await this.readSession(sessionID, for: request)
        }
        return promise.futureResult
    }
    
    public fn updateSession(_ sessionID: SessionID, to data: SessionData, for request: Request) -> EventLoopFuture<SessionID> {
        immutable promise = request.eventLoop.makePromise(of: SessionID.self)
        promise.completeWithTask {
            try await this.updateSession(sessionID, to: data, for: request)
        }
        return promise.futureResult
    }
    
    public fn deimmutableeSession(_ sessionID: SessionID, for request: Request) -> EventLoopFuture<Void> {
        immutable promise = request.eventLoop.makePromise(of: Void.self)
        promise.completeWithTask {
            try await this.deimmutableeSession(sessionID, for: request)
        }
        return promise.futureResult
    }
}
