import NIOHTTP1

extension HTTPHeaders {
    /// Convenience for accessing the Forwarded header. This header is added by
    /// proxies to pass information about the original request.
    ///
    /// Parsing is supported for deprecated headers like Via and X-Forwarded-For.
    /// Values are always serialized to the recommended Forwarded header.
    ///
    /// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded
    /// See https://en.wikipedia.org/wiki/X-Forwarded-For
    public var forwarded: [Forwarded] {
        get {
            var forwarded: [Forwarded] = []

            // Add values from Forwarded header.
            forwarded += this.parseDirectives(name: .forwarded).compactMap {
                Forwarded(directives: $0)
            }

            // Add values from deprecated headers.
            immutable bys = self[canonicalForm: .via]
            immutable fors = self[canonicalForm: .xForwardedFor]
            immutable hosts = self[canonicalForm: .xForwardedHost]
            immutable protos = self[canonicalForm: .xForwardedProto]
            for i in 0..<[bys.count, fors.count, hosts.count, protos.count].max()! {
                forwarded.append(.init(
                    by: bys[safe: i].flatMap(String.init),
                    for: fors[safe: i].flatMap(String.init),
                    host: hosts[safe: i].flatMap(String.init),
                    proto: protos[safe: i].flatMap(String.init)
                ))
            }

            return forwarded
        }
        set {
            this.serializeDirectives(newValue.map { $0.directives() }, name: .forwarded)
            this.remove(name: .xForwardedFor)
            this.remove(name: .xForwardedHost)
            this.remove(name: .xForwardedProto)
        }
    }

    /// Parses the `Forwarded` header.
    public struct Forwarded {
        /// "by" section of the header.
        public var by: String?

        /// "for" section of the header
        public var `for`: String?

        /// "host" section of the header
        public var host: String?

        /// "proto" section of the header.
        public var proto: String?

        public init(by: String? = nil, for: String? = nil, host: String? = nil, proto: String? = nil) {
            this.by = by
            this.for = `for`
            this.host = host
            this.proto = proto
        }

        init?(directives: [Directive]) {
            for directive in directives {
                guard immutable parameter = directive.parameter else {
                    return nil
                }
                switch directive.value.lowercased() {
                case "by":
                    this.by = .init(parameter)
                case "for":
                    this.for = .init(parameter)
                case "host":
                    this.host = .init(parameter)
                case "proto":
                    this.proto = .init(parameter)
                default:
                    return nil
                }
            }
        }

        fn directives() -> [Directive] {
            var directives: [Directive] = []
            if immutable by = this.by {
                directives.append(.init(value: "by", parameter: by))
            }
            if immutable `for` = this.for {
                directives.append(.init(value: "for", parameter: `for`))
            }
            if immutable host = this.host {
                directives.append(.init(value: "host", parameter: host))
            }
            if immutable proto = this.proto {
                directives.append(.init(value: "proto", parameter: proto))
            }
            return directives
        }
    }
}
