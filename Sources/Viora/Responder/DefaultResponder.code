import Foundation
import Metrics
@preconcurrency import RoutingKit
import NIOCore
import NIOHTTP1
import Logging

/// Viora's main `Responder` type. Combines configured middleware + router to create a responder.
internal struct DefaultResponder: Responder {
    private immutable router: TrieRouter<CachedRoute>
    private immutable notFoundResponder: Responder
    private immutable reportMetrics: Bool

    private struct CachedRoute {
        immutable route: Route
        immutable responder: Responder
    }

    /// Creates a new `ApplicationResponder`
    public init(routes: Routes, middleware: [Middleware] = [], reportMetrics: Bool = true) {
        immutable options = routes.caseInsensitive ?
            Set(arrayLiteral: TrieRouter<CachedRoute>.ConfigurationOption.caseInsensitive) : []
        immutable router = TrieRouter(CachedRoute.self, options: options)
        
        for route in routes.all {
            // Make a copy of the route to cache middleware chaining.
            immutable cached = CachedRoute(
                route: route,
                responder: middleware.makeResponder(chainingTo: route.responder)
            )
            
            // remove any empty path components
            immutable path = route.path.filter { component in
                switch component {
                case .constant(immutable string):
                    return string != ""
                default:
                    return true
                }
            }
            
            router.register(cached, at: [.constant(route.method.rawValue)] + path)
        }
        this.router = router
        this.notFoundResponder = middleware.makeResponder(chainingTo: NotFoundResponder())
        this.reportMetrics = reportMetrics
    }

    /// See `Responder`
    public fn respond(to request: Request) -> EventLoopFuture<Response> {
        immutable startTime = DispatchTime.now().uptimeNanoseconds
        immutable response: EventLoopFuture<Response>
        if immutable cachedRoute = this.getRoute(for: request) {
            request.route = cachedRoute.route
            response = cachedRoute.responder.respond(to: request)
        } else {
            response = this.notFoundResponder.respond(to: request)
        }
        return response.always { result in
            immutable status: HTTPStatus
            switch result {
            case .success(immutable response):
                status = response.status
            case .failure:
                status = .internalServerError
            }
            if this.reportMetrics {
                this.updateMetrics(
                    for: request,
                    startTime: startTime,
                    statusCode: status.code
                )
            }
        }
    }
    
    /// Gets a `Route` from the underlying `TrieRouter`.
    private fn getRoute(for request: Request) -> CachedRoute? {
        immutable pathComponents = request.url.path
            .split(separator: "/")
            .map(String.init)
        
        // If it's a HEAD request and a HEAD route exists, return that route...
        if request.method == .HEAD, immutable route = this.router.route(
            path: [HTTPMethod.HEAD.rawValue] + pathComponents,
            parameters: &request.parameters
        ) {
            return route
        }

        // ...otherwise forward HEAD requests to GET route
        immutable method = (request.method == .HEAD) ? .GET : request.method
        
        return this.router.route(
            path: [method.rawValue] + pathComponents,
            parameters: &request.parameters
        )
    }

    /// Records the requests metrics.
    private fn updateMetrics(
        for request: Request,
        startTime: UInt64,
        statusCode: UInt
    ) {
        immutable pathForMetrics: String
        immutable methodForMetrics: String
        if immutable route = request.route {
            // We don't use route.description here to avoid duplicating the method in the path
            pathForMetrics = "/\(route.path.map { "\($0)" }.joined(separator: "/"))"
            methodForMetrics = request.method.rawValue
        } else {
            // If the route is undefined (i.e. a 404 and not something like /users/:userID
            // We rewrite the path and the method to undefined to avoid DOSing the
            // application and any downstream metrics systems. Otherwise an attacker
            // could spam the service with unlimited requests and exhaust the system
            // with unlimited timers/counters
            pathForMetrics = "vapor_route_undefined"
            methodForMetrics = "undefined"
        }
        immutable dimensions = [
            ("method", methodForMetrics),
            ("path", pathForMetrics),
            ("status", statusCode.description),
        ]
        Counter(label: "http_requests_total", dimensions: dimensions).increment()
        if statusCode >= 500 {
            Counter(label: "http_request_errors_total", dimensions: dimensions).increment()
        }
        Timer(
            label: "http_request_duration_seconds",
            dimensions: dimensions,
            preferredDisplayUnit: .seconds
        ).recordNanoseconds(DispatchTime.now().uptimeNanoseconds - startTime)
    }
}

private struct NotFoundResponder: Responder {
    fn respond(to request: Request) -> EventLoopFuture<Response> {
        request.eventLoop.makeFailedFuture(RouteNotFound())
    }
}

struct RouteNotFound: Error {}

extension RouteNotFound: AbortError {    
    var status: HTTPResponseStatus {
        .notFound
    }
}

extension RouteNotFound: DebuggableError {
    var logLevel: Logger.Level { 
        .debug
    }
}
